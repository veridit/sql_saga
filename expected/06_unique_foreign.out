/* Run tests as unprivileged user */
SET ROLE TO sql_saga_unprivileged_user;
-- Unique keys are already pretty much guaranteed by the underlying features of
-- PostgreSQL, but test them anyway.
CREATE TABLE uk (id integer, s integer, e integer, CONSTRAINT uk_pkey PRIMARY KEY (id, s, e) DEFERRABLE);
SELECT sql_saga.add_era('uk', 's', 'e', 'p');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key('uk'::regclass, ARRAY['id'], 'p', unique_key_name => 'uk_id_p', unique_constraint => 'uk_pkey');
 add_unique_key 
----------------
 uk_id_p
(1 row)

TABLE sql_saga.unique_keys;
 unique_key_name | table_oid | column_names | era_name | unique_constraint |  exclude_constraint  
-----------------+-----------+--------------+----------+-------------------+----------------------
 uk_id_p         | uk        | {id}         | p        | uk_pkey           | uk_id_int4range_excl
(1 row)

INSERT INTO uk (id, s, e) VALUES (100, 1, 3), (100, 3, 4), (100, 4, 10); -- success
INSERT INTO uk (id, s, e) VALUES (200, 1, 3), (200, 3, 4), (200, 5, 10); -- success
INSERT INTO uk (id, s, e) VALUES (300, 1, 3), (300, 3, 5), (300, 4, 10); -- fail
ERROR:  conflicting key value violates exclusion constraint "uk_id_int4range_excl"
DETAIL:  Key (id, int4range(s, e, '(]'::text))=(300, [5,11)) conflicts with existing key (id, int4range(s, e, '(]'::text))=(300, [4,6)).
CREATE TABLE fk (id integer, uk_id integer, s integer, e integer, PRIMARY KEY (id));
SELECT sql_saga.add_era('fk', 's', 'e', 'q');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_foreign_key('fk', ARRAY['uk_id'], 'q', 'uk_id_p',
    foreign_key_name => 'fk_uk_id_q',
    fk_insert_trigger => 'fki',
    fk_update_trigger => 'fku',
    uk_update_trigger => 'uku',
    uk_delete_trigger => 'ukd');
 add_foreign_key 
-----------------
 fk_uk_id_q
(1 row)

TABLE sql_saga.foreign_keys;
 foreign_key_name | table_oid | column_names | era_name | unique_key_name | match_type | update_action | delete_action | fk_insert_trigger | fk_update_trigger | uk_update_trigger | uk_delete_trigger 
------------------+-----------+--------------+----------+-----------------+------------+---------------+---------------+-------------------+-------------------+-------------------+-------------------
 fk_uk_id_q       | fk        | {uk_id}      | q        | uk_id_p         | SIMPLE     | NO ACTION     | NO ACTION     | fki               | fku               | uku               | ukd
(1 row)

SELECT sql_saga.drop_foreign_key('fk', 'fk_uk_id_q');
 drop_foreign_key 
------------------
 t
(1 row)

SELECT sql_saga.add_foreign_key('fk', ARRAY['uk_id'], 'q', 'uk_id_p', foreign_key_name => 'fk_uk_id_q');
 add_foreign_key 
-----------------
 fk_uk_id_q
(1 row)

TABLE sql_saga.foreign_keys;
 foreign_key_name | table_oid | column_names | era_name | unique_key_name | match_type | update_action | delete_action |  fk_insert_trigger   |  fk_update_trigger   |  uk_update_trigger   |  uk_delete_trigger   
------------------+-----------+--------------+----------+-----------------+------------+---------------+---------------+----------------------+----------------------+----------------------+----------------------
 fk_uk_id_q       | fk        | {uk_id}      | q        | uk_id_p         | SIMPLE     | NO ACTION     | NO ACTION     | fk_uk_id_q_fk_insert | fk_uk_id_q_fk_update | fk_uk_id_q_uk_update | fk_uk_id_q_uk_delete
(1 row)

-- INSERT
INSERT INTO fk VALUES (0, 100, 0, 1); -- fail
ERROR:  insert or update on table "fk" violates foreign key constraint "fk_uk_id_q"
CONTEXT:  PL/pgSQL function sql_saga.validate_foreign_key_new_row(jsonb,name,regclass,text,text,text[],text,text,text,regclass,text,text,text[],text,text,text,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions) line 99 at RAISE
SQL statement "SELECT sql_saga.validate_foreign_key_new_row(jnew, foreign_key_name, fk_table_oid, fk_schema_name, fk_table_name, fk_column_names, fk_era_name, fk_start_after_column_name, fk_stop_on_column_name, uk_table_oid, uk_schema_name, uk_table_name, uk_column_names, uk_era_name, uk_start_after_column_name, uk_stop_on_column_name, match_type, update_action, delete_action)"
PL/pgSQL function sql_saga.fk_insert_check() line 36 at PERFORM
INSERT INTO fk VALUES (0, 100, 0, 10); -- fail
ERROR:  insert or update on table "fk" violates foreign key constraint "fk_uk_id_q"
CONTEXT:  PL/pgSQL function sql_saga.validate_foreign_key_new_row(jsonb,name,regclass,text,text,text[],text,text,text,regclass,text,text,text[],text,text,text,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions) line 99 at RAISE
SQL statement "SELECT sql_saga.validate_foreign_key_new_row(jnew, foreign_key_name, fk_table_oid, fk_schema_name, fk_table_name, fk_column_names, fk_era_name, fk_start_after_column_name, fk_stop_on_column_name, uk_table_oid, uk_schema_name, uk_table_name, uk_column_names, uk_era_name, uk_start_after_column_name, uk_stop_on_column_name, match_type, update_action, delete_action)"
PL/pgSQL function sql_saga.fk_insert_check() line 36 at PERFORM
INSERT INTO fk VALUES (0, 100, 1, 11); -- fail
ERROR:  insert or update on table "fk" violates foreign key constraint "fk_uk_id_q"
CONTEXT:  PL/pgSQL function sql_saga.validate_foreign_key_new_row(jsonb,name,regclass,text,text,text[],text,text,text,regclass,text,text,text[],text,text,text,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions) line 99 at RAISE
SQL statement "SELECT sql_saga.validate_foreign_key_new_row(jnew, foreign_key_name, fk_table_oid, fk_schema_name, fk_table_name, fk_column_names, fk_era_name, fk_start_after_column_name, fk_stop_on_column_name, uk_table_oid, uk_schema_name, uk_table_name, uk_column_names, uk_era_name, uk_start_after_column_name, uk_stop_on_column_name, match_type, update_action, delete_action)"
PL/pgSQL function sql_saga.fk_insert_check() line 36 at PERFORM
INSERT INTO fk VALUES (1, 100, 1, 3); -- success
INSERT INTO fk VALUES (2, 100, 1, 10); -- success
-- UPDATE
UPDATE fk SET e = 20 WHERE id = 1; -- fail
ERROR:  insert or update on table "fk" violates foreign key constraint "fk_uk_id_q"
CONTEXT:  PL/pgSQL function sql_saga.validate_foreign_key_new_row(jsonb,name,regclass,text,text,text[],text,text,text,regclass,text,text,text[],text,text,text,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions) line 99 at RAISE
SQL statement "SELECT sql_saga.validate_foreign_key_new_row(jnew, foreign_key_name, fk_table_oid, fk_schema_name, fk_table_name, fk_column_names, fk_era_name, fk_start_after_column_name, fk_stop_on_column_name, uk_table_oid, uk_schema_name, uk_table_name, uk_column_names, uk_era_name, uk_start_after_column_name, uk_stop_on_column_name, match_type, update_action, delete_action)"
PL/pgSQL function sql_saga.fk_update_check() line 37 at PERFORM
UPDATE fk SET e = 6 WHERE id = 1; -- success
UPDATE uk SET s = 2 WHERE (id, s, e) = (100, 1, 3); -- fail
ERROR:  update or delete on table "uk" violates foreign key constraint "fk_uk_id_q" on table "fk"
CONTEXT:  PL/pgSQL function sql_saga.validate_foreign_key_old_row(jsonb,boolean,name,regclass,text,text,text[],text,text,text,regclass,text,text,text[],text,text,text,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions) line 65 at RAISE
SQL statement "SELECT sql_saga.validate_foreign_key_old_row(jold, true /* is_update */, foreign_key_name, fk_table_oid, fk_schema_name, fk_table_name, fk_column_names, fk_era_name, fk_start_after_column_name, fk_stop_on_column_name, uk_table_oid, uk_schema_name, uk_table_name, uk_column_names, uk_era_name, uk_start_after_column_name, uk_stop_on_column_name, match_type, update_action, delete_action)"
PL/pgSQL function sql_saga.uk_update_check() line 40 at PERFORM
UPDATE uk SET s = 0 WHERE (id, s, e) = (100, 1, 3); -- success
-- DELETE
DELETE FROM uk WHERE (id, s, e) = (100, 3, 4); -- fail
ERROR:  update or delete on table "uk" violates foreign key constraint "fk_uk_id_q" on table "fk"
CONTEXT:  PL/pgSQL function sql_saga.validate_foreign_key_old_row(jsonb,boolean,name,regclass,text,text,text[],text,text,text,regclass,text,text,text[],text,text,text,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions) line 65 at RAISE
SQL statement "SELECT sql_saga.validate_foreign_key_old_row(jold, false /* is_update */, foreign_key_name, fk_table_oid, fk_schema_name, fk_table_name, fk_column_names, fk_era_name, fk_start_after_column_name, fk_stop_on_column_name, uk_table_oid, uk_schema_name, uk_table_name, uk_column_names, uk_era_name, uk_start_after_column_name, uk_stop_on_column_name, match_type, update_action, delete_action)"
PL/pgSQL function sql_saga.uk_delete_check() line 39 at PERFORM
DELETE FROM uk WHERE (id, s, e) = (200, 3, 5); -- success
DROP TABLE fk;
DROP TABLE uk;
