CREATE EXTENSION sql_saga CASCADE;
NOTICE:  installing required extension "btree_gist"
CREATE TABLE shifts (
  job_id INTEGER,
  worker_id INTEGER,
  valid_after timestamptz,
  valid_to timestamptz
);
CREATE TABLE houses (
  id INTEGER,
  assessment FLOAT,
  valid_after timestamptz,
  valid_to timestamptz
);
CREATE TABLE rooms (
  id INTEGER,
  house_id INTEGER,
  valid_after timestamptz,
  valid_to timestamptz
);
-- Before using sql_saga
\d rooms
                          Table "public.rooms"
   Column    |           Type           | Collation | Nullable | Default 
-------------+--------------------------+-----------+----------+---------
 id          | integer                  |           |          | 
 house_id    | integer                  |           |          | 
 valid_after | timestamp with time zone |           |          | 
 valid_to    | timestamp with time zone |           |          | 

\d houses
                          Table "public.houses"
   Column    |           Type           | Collation | Nullable | Default 
-------------+--------------------------+-----------+----------+---------
 id          | integer                  |           |          | 
 assessment  | double precision         |           |          | 
 valid_after | timestamp with time zone |           |          | 
 valid_to    | timestamp with time zone |           |          | 

\d shifts
                          Table "public.shifts"
   Column    |           Type           | Collation | Nullable | Default 
-------------+--------------------------+-----------+----------+---------
 job_id      | integer                  |           |          | 
 worker_id   | integer                  |           |          | 
 valid_after | timestamp with time zone |           |          | 
 valid_to    | timestamp with time zone |           |          | 

-- Verify that enable and disable each work correctly.
SELECT sql_saga.add_era('shifts', 'valid_after', 'valid_to');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_era('houses', 'valid_after', 'valid_to', 'valid');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_era('rooms', 'valid_after', 'valid_to');
 add_era 
---------
 t
(1 row)

TABLE sql_saga.era;
 table_oid | era_name | start_after_column_name | stop_on_column_name | range_type | bounds_check_constraint | audit_table_oid 
-----------+----------+-------------------------+---------------------+------------+-------------------------+-----------------
 shifts    | valid    | valid_after             | valid_to            | tstzrange  | shifts_valid_check      | 
 houses    | valid    | valid_after             | valid_to            | tstzrange  | houses_valid_check      | 
 rooms     | valid    | valid_after             | valid_to            | tstzrange  | rooms_valid_check       | 
(3 rows)

SELECT sql_saga.add_unique_key('shifts', ARRAY['job_id','worker_id'], 'valid');
        add_unique_key         
-------------------------------
 shifts_job_id_worker_id_valid
(1 row)

SELECT sql_saga.add_unique_key('houses', ARRAY['id'], 'valid');
 add_unique_key  
-----------------
 houses_id_valid
(1 row)

SELECT sql_saga.add_unique_key('rooms', ARRAY['id'], 'valid');
 add_unique_key 
----------------
 rooms_id_valid
(1 row)

TABLE sql_saga.unique_keys;
        unique_key_name        | table_oid |    column_names    | era_name |                unique_constraint                 |           exclude_constraint           
-------------------------------+-----------+--------------------+----------+--------------------------------------------------+----------------------------------------
 shifts_job_id_worker_id_valid | shifts    | {job_id,worker_id} | valid    | shifts_job_id_worker_id_valid_after_valid_to_key | shifts_job_id_worker_id_tstzrange_excl
 houses_id_valid               | houses    | {id}               | valid    | houses_id_valid_after_valid_to_key               | houses_id_tstzrange_excl
 rooms_id_valid                | rooms     | {id}               | valid    | rooms_id_valid_after_valid_to_key                | rooms_id_tstzrange_excl
(3 rows)

SELECT sql_saga.add_foreign_key('rooms', ARRAY['house_id'], 'valid', 'houses_id_valid');
   add_foreign_key    
----------------------
 rooms_house_id_valid
(1 row)

TABLE sql_saga.foreign_keys;
   foreign_key_name   | table_oid | column_names | era_name | unique_key_name | match_type | update_action | delete_action |       fk_insert_trigger        |       fk_update_trigger        |       uk_update_trigger        |       uk_delete_trigger        
----------------------+-----------+--------------+----------+-----------------+------------+---------------+---------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------
 rooms_house_id_valid | rooms     | {house_id}   | valid    | houses_id_valid | SIMPLE     | NO ACTION     | NO ACTION     | rooms_house_id_valid_fk_insert | rooms_house_id_valid_fk_update | rooms_house_id_valid_uk_update | rooms_house_id_valid_uk_delete
(1 row)

-- While sql_saga is active
\d rooms
                          Table "public.rooms"
   Column    |           Type           | Collation | Nullable | Default 
-------------+--------------------------+-----------+----------+---------
 id          | integer                  |           |          | 
 house_id    | integer                  |           |          | 
 valid_after | timestamp with time zone |           | not null | 
 valid_to    | timestamp with time zone |           | not null | 
Indexes:
    "rooms_id_tstzrange_excl" EXCLUDE USING gist (id WITH =, tstzrange(valid_after, valid_to, '(]'::text) WITH &&) DEFERRABLE
    "rooms_id_valid_after_valid_to_key" UNIQUE CONSTRAINT, btree (id, valid_after, valid_to) DEFERRABLE
Check constraints:
    "rooms_valid_check" CHECK (valid_after < valid_to)
Triggers:
    rooms_house_id_valid_fk_insert AFTER INSERT ON rooms FROM houses DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION sql_saga.fk_insert_check_c('rooms_house_id_valid', 'rooms', 'public', 'rooms', '{{house_id}}', 'valid', 'valid_after', 'valid_to', 'houses', 'public', 'houses', '{{id}}', 'valid', 'valid_after', 'valid_to', 'SIMPLE', 'NO ACTION', 'NO ACTION')
    rooms_house_id_valid_fk_update AFTER UPDATE OF house_id, valid_after, valid_to ON rooms FROM houses DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION sql_saga.fk_update_check_c('rooms_house_id_valid', 'rooms', 'public', 'rooms', '{{house_id}}', 'valid', 'valid_after', 'valid_to', 'houses', 'public', 'houses', '{{id}}', 'valid', 'valid_after', 'valid_to', 'SIMPLE', 'NO ACTION', 'NO ACTION')

\d houses
                          Table "public.houses"
   Column    |           Type           | Collation | Nullable | Default 
-------------+--------------------------+-----------+----------+---------
 id          | integer                  |           |          | 
 assessment  | double precision         |           |          | 
 valid_after | timestamp with time zone |           | not null | 
 valid_to    | timestamp with time zone |           | not null | 
Indexes:
    "houses_id_tstzrange_excl" EXCLUDE USING gist (id WITH =, tstzrange(valid_after, valid_to, '(]'::text) WITH &&) DEFERRABLE
    "houses_id_valid_after_valid_to_key" UNIQUE CONSTRAINT, btree (id, valid_after, valid_to) DEFERRABLE
Check constraints:
    "houses_valid_check" CHECK (valid_after < valid_to)
Triggers:
    rooms_house_id_valid_uk_delete AFTER DELETE ON houses FROM rooms DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION sql_saga.uk_delete_check_c('rooms_house_id_valid', 'rooms', 'public', 'rooms', '{{house_id}}', 'valid', 'valid_after', 'valid_to', 'houses', 'public', 'houses', '{{id}}', 'valid', 'valid_after', 'valid_to', 'SIMPLE', 'NO ACTION', 'NO ACTION')
    rooms_house_id_valid_uk_update AFTER UPDATE OF id, valid_after, valid_to ON houses FROM rooms DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION sql_saga.uk_update_check('rooms_house_id_valid', 'rooms', 'public', 'rooms', '{{house_id}}', 'valid', 'valid_after', 'valid_to', 'houses', 'public', 'houses', '{{id}}', 'valid', 'valid_after', 'valid_to', 'SIMPLE', 'NO ACTION', 'NO ACTION')

\d shifts
                          Table "public.shifts"
   Column    |           Type           | Collation | Nullable | Default 
-------------+--------------------------+-----------+----------+---------
 job_id      | integer                  |           |          | 
 worker_id   | integer                  |           |          | 
 valid_after | timestamp with time zone |           | not null | 
 valid_to    | timestamp with time zone |           | not null | 
Indexes:
    "shifts_job_id_worker_id_tstzrange_excl" EXCLUDE USING gist (job_id WITH =, worker_id WITH =, tstzrange(valid_after, valid_to, '(]'::text) WITH &&) DEFERRABLE
    "shifts_job_id_worker_id_valid_after_valid_to_key" UNIQUE CONSTRAINT, btree (job_id, worker_id, valid_after, valid_to) DEFERRABLE
Check constraints:
    "shifts_valid_check" CHECK (valid_after < valid_to)

-- Remove sql_saga
SELECT sql_saga.drop_foreign_key('rooms', 'rooms_house_id_valid');
 drop_foreign_key 
------------------
 t
(1 row)

TABLE sql_saga.foreign_keys;
 foreign_key_name | table_oid | column_names | era_name | unique_key_name | match_type | update_action | delete_action | fk_insert_trigger | fk_update_trigger | uk_update_trigger | uk_delete_trigger 
------------------+-----------+--------------+----------+-----------------+------------+---------------+---------------+-------------------+-------------------+-------------------+-------------------
(0 rows)

SELECT sql_saga.drop_unique_key('rooms', 'rooms_id_valid');
 drop_unique_key 
-----------------
 
(1 row)

SELECT sql_saga.drop_unique_key('houses','houses_id_valid');
 drop_unique_key 
-----------------
 
(1 row)

-- TODO: Simplify this API, to take the same parameters when created.
-- TODO: Detect and raise an error if there is no match in "sql_saga.unique_keys".
SELECT sql_saga.drop_unique_key('shifts', 'shifts_job_id_worker_id_valid');
 drop_unique_key 
-----------------
 
(1 row)

TABLE sql_saga.unique_keys;
 unique_key_name | table_oid | column_names | era_name | unique_constraint | exclude_constraint 
-----------------+-----------+--------------+----------+-------------------+--------------------
(0 rows)

SELECT sql_saga.drop_era('rooms');
 drop_era 
----------
 t
(1 row)

SELECT sql_saga.drop_era('houses');
 drop_era 
----------
 t
(1 row)

SELECT sql_saga.drop_era('shifts');
 drop_era 
----------
 t
(1 row)

TABLE sql_saga.era;
 table_oid | era_name | start_after_column_name | stop_on_column_name | range_type | bounds_check_constraint | audit_table_oid 
-----------+----------+-------------------------+---------------------+------------+-------------------------+-----------------
(0 rows)

-- After removing sql_saga, it should be as before.
\d rooms
                          Table "public.rooms"
   Column    |           Type           | Collation | Nullable | Default 
-------------+--------------------------+-----------+----------+---------
 id          | integer                  |           |          | 
 house_id    | integer                  |           |          | 
 valid_after | timestamp with time zone |           | not null | 
 valid_to    | timestamp with time zone |           | not null | 

\d houses
                          Table "public.houses"
   Column    |           Type           | Collation | Nullable | Default 
-------------+--------------------------+-----------+----------+---------
 id          | integer                  |           |          | 
 assessment  | double precision         |           |          | 
 valid_after | timestamp with time zone |           | not null | 
 valid_to    | timestamp with time zone |           | not null | 

\d shifts
                          Table "public.shifts"
   Column    |           Type           | Collation | Nullable | Default 
-------------+--------------------------+-----------+----------+---------
 job_id      | integer                  |           |          | 
 worker_id   | integer                  |           |          | 
 valid_after | timestamp with time zone |           | not null | 
 valid_to    | timestamp with time zone |           | not null | 

-- Make convenience functions for later tests.
CREATE FUNCTION enable_sql_saga_for_shifts_houses_and_rooms() RETURNS void LANGUAGE plpgsql AS $EOF$
BEGIN
  PERFORM sql_saga.add_era('shifts', 'valid_after', 'valid_to');
  PERFORM sql_saga.add_unique_key('shifts', ARRAY['job_id','worker_id'], 'valid');

  PERFORM sql_saga.add_era('houses', 'valid_after', 'valid_to', 'valid');
  PERFORM sql_saga.add_unique_key('houses', ARRAY['id'], 'valid');

  PERFORM sql_saga.add_era('rooms', 'valid_after', 'valid_to');
  PERFORM sql_saga.add_unique_key('rooms', ARRAY['id'], 'valid');
  PERFORM sql_saga.add_foreign_key('rooms', ARRAY['house_id'], 'valid', 'houses_id_valid');
END;
$EOF$;
CREATE FUNCTION disable_sql_saga_for_shifts_houses_and_rooms() RETURNS void LANGUAGE plpgsql AS $EOF$
BEGIN
  -- Drop objects in reverse order of creation, checking for existence first
  -- to make the cleanup script robust against early test failures.
  IF EXISTS (SELECT 1 FROM sql_saga.foreign_keys WHERE foreign_key_name = 'rooms_house_id_valid') THEN
    PERFORM sql_saga.drop_foreign_key('rooms'::regclass, 'rooms_house_id_valid');
  END IF;

  IF EXISTS (SELECT 1 FROM sql_saga.unique_keys WHERE unique_key_name = 'rooms_id_valid') THEN
    PERFORM sql_saga.drop_unique_key('rooms'::regclass, 'rooms_id_valid');
  END IF;
  IF EXISTS (SELECT 1 FROM sql_saga.unique_keys WHERE unique_key_name = 'houses_id_valid') THEN
    PERFORM sql_saga.drop_unique_key('houses'::regclass,'houses_id_valid');
  END IF;
  IF EXISTS (SELECT 1 FROM sql_saga.unique_keys WHERE unique_key_name = 'shifts_job_id_worker_id_valid') THEN
    PERFORM sql_saga.drop_unique_key('shifts'::regclass, 'shifts_job_id_worker_id_valid');
  END IF;

  IF EXISTS (SELECT 1 FROM sql_saga.era WHERE table_oid = 'rooms'::regclass AND era_name = 'valid') THEN
    PERFORM sql_saga.drop_era('rooms'::regclass);
  END IF;
  IF EXISTS (SELECT 1 FROM sql_saga.era WHERE table_oid = 'houses'::regclass AND era_name = 'valid') THEN
    PERFORM sql_saga.drop_era('houses'::regclass);
  END IF;
  IF EXISTS (SELECT 1 FROM sql_saga.era WHERE table_oid = 'shifts'::regclass AND era_name = 'valid') THEN
    PERFORM sql_saga.drop_era('shifts'::regclass);
  END IF;
END;
$EOF$;
-- Test the convenience functions.
SELECT enable_sql_saga_for_shifts_houses_and_rooms();
 enable_sql_saga_for_shifts_houses_and_rooms 
---------------------------------------------
 
(1 row)

SELECT disable_sql_saga_for_shifts_houses_and_rooms()
 disable_sql_saga_for_shifts_houses_and_rooms 
----------------------------------------------
 
(1 row)

