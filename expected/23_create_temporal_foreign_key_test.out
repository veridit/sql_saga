\i sql/include/test_setup.sql
--
-- test_setup.sql
--
-- Common setup for regression tests that need to be self-contained.
-- This script creates the extension, a user role, and grants permissions.
--
SET datestyle = 'ISO, YMD';
CREATE EXTENSION IF NOT EXISTS btree_gist;
CREATE EXTENSION IF NOT EXISTS sql_saga CASCADE;
DO $$
BEGIN
    CREATE ROLE sql_saga_unprivileged_user;
EXCEPTION WHEN duplicate_object THEN
END
$$;
GRANT USAGE ON SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT SELECT ON ALL TABLES IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
/*
 * Allow the unprivileged user to create tables in the public schema.
 * This is required for tests that create their own tables.
 * PG 15+ restricts this by default.
 */
GRANT CREATE ON SCHEMA public TO PUBLIC;
BEGIN;
SET ROLE TO sql_saga_unprivileged_user;
\i sql/support/shifts_houses_rooms_tables.sql
--
-- Creates the shifts, houses, and rooms tables used by many legacy tests.
--
CREATE TABLE shifts (
  job_id INTEGER,
  worker_id INTEGER,
  valid_from DATE,
  valid_until DATE
);
CREATE TABLE houses (
  id INTEGER,
  assessment FLOAT,
  valid_from DATE,
  valid_until DATE
);
CREATE TABLE rooms (
  id INTEGER,
  house_id INTEGER,
  valid_from DATE,
  valid_until DATE
);
INSERT INTO houses VALUES
  (1, 150000, '2015-01-01'::DATE, '2016-01-01'::DATE),
  (1, 200000, '2016-01-01'::DATE, '2017-01-01'::DATE)
;
-- it works on an empty table
SAVEPOINT s;
\i sql/support/shifts_houses_rooms_enable_saga.sql
--
-- Activates sql_saga for the shifts, houses, and rooms tables.
-- This was formerly the enable_sql_saga_for_shifts_houses_and_rooms() function.
--
SELECT sql_saga.add_era(table_oid => 'shifts', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'shifts', column_names => ARRAY['job_id','worker_id'], era_name => 'valid', p_key_type => 'natural');
        add_unique_key         
-------------------------------
 shifts_job_id_worker_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'houses', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', era_name => 'valid', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'houses', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key  
-----------------
 houses_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'rooms', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'rooms', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key 
----------------
 rooms_id_valid
(1 row)

SELECT sql_saga.add_foreign_key(
    fk_table_oid => 'rooms',
    fk_column_names => ARRAY['house_id'],
    fk_era_name => 'valid',
    unique_key_name => 'houses_id_valid'
);
   add_foreign_key    
----------------------
 rooms_house_id_valid
(1 row)

ROLLBACK TO SAVEPOINT s;
-- it works on a table with a NULL foreign key
SAVEPOINT s;
INSERT INTO rooms(id,house_id,valid_from,valid_until) VALUES (1, NULL, '2015-01-01'::DATE, '2017-01-01'::DATE);
\i sql/support/shifts_houses_rooms_enable_saga.sql
--
-- Activates sql_saga for the shifts, houses, and rooms tables.
-- This was formerly the enable_sql_saga_for_shifts_houses_and_rooms() function.
--
SELECT sql_saga.add_era(table_oid => 'shifts', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'shifts', column_names => ARRAY['job_id','worker_id'], era_name => 'valid', p_key_type => 'natural');
        add_unique_key         
-------------------------------
 shifts_job_id_worker_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'houses', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', era_name => 'valid', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'houses', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key  
-----------------
 houses_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'rooms', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'rooms', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key 
----------------
 rooms_id_valid
(1 row)

SELECT sql_saga.add_foreign_key(
    fk_table_oid => 'rooms',
    fk_column_names => ARRAY['house_id'],
    fk_era_name => 'valid',
    unique_key_name => 'houses_id_valid'
);
   add_foreign_key    
----------------------
 rooms_house_id_valid
(1 row)

ROLLBACK TO SAVEPOINT s;
-- it works on a table with a FK fulfilled by one row
SAVEPOINT s;
INSERT INTO rooms(id,house_id,valid_from,valid_until) VALUES (1, 1, '2015-01-01'::DATE, '2016-01-01'::DATE);
\i sql/support/shifts_houses_rooms_enable_saga.sql
--
-- Activates sql_saga for the shifts, houses, and rooms tables.
-- This was formerly the enable_sql_saga_for_shifts_houses_and_rooms() function.
--
SELECT sql_saga.add_era(table_oid => 'shifts', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'shifts', column_names => ARRAY['job_id','worker_id'], era_name => 'valid', p_key_type => 'natural');
        add_unique_key         
-------------------------------
 shifts_job_id_worker_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'houses', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', era_name => 'valid', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'houses', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key  
-----------------
 houses_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'rooms', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'rooms', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key 
----------------
 rooms_id_valid
(1 row)

SELECT sql_saga.add_foreign_key(
    fk_table_oid => 'rooms',
    fk_column_names => ARRAY['house_id'],
    fk_era_name => 'valid',
    unique_key_name => 'houses_id_valid'
);
   add_foreign_key    
----------------------
 rooms_house_id_valid
(1 row)

ROLLBACK TO SAVEPOINT s;
-- it works on a table with a FK fulfilled by two rows
SAVEPOINT s;
INSERT INTO rooms(id,house_id,valid_from,valid_until) VALUES (1, 1, '2015-01-01'::DATE, '2016-06-01'::DATE);
\i sql/support/shifts_houses_rooms_enable_saga.sql
--
-- Activates sql_saga for the shifts, houses, and rooms tables.
-- This was formerly the enable_sql_saga_for_shifts_houses_and_rooms() function.
--
SELECT sql_saga.add_era(table_oid => 'shifts', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'shifts', column_names => ARRAY['job_id','worker_id'], era_name => 'valid', p_key_type => 'natural');
        add_unique_key         
-------------------------------
 shifts_job_id_worker_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'houses', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', era_name => 'valid', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'houses', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key  
-----------------
 houses_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'rooms', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'rooms', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key 
----------------
 rooms_id_valid
(1 row)

SELECT sql_saga.add_foreign_key(
    fk_table_oid => 'rooms',
    fk_column_names => ARRAY['house_id'],
    fk_era_name => 'valid',
    unique_key_name => 'houses_id_valid'
);
   add_foreign_key    
----------------------
 rooms_house_id_valid
(1 row)

ROLLBACK TO SAVEPOINT s;
-- it fails on a table with a missing foreign key
SAVEPOINT s;
INSERT INTO rooms(id,house_id,valid_from,valid_until) VALUES (1, 2, '2015-01-01'::DATE, '2016-01-01'::DATE);
\i sql/support/shifts_houses_rooms_enable_saga.sql
--
-- Activates sql_saga for the shifts, houses, and rooms tables.
-- This was formerly the enable_sql_saga_for_shifts_houses_and_rooms() function.
--
SELECT sql_saga.add_era(table_oid => 'shifts', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'shifts', column_names => ARRAY['job_id','worker_id'], era_name => 'valid', p_key_type => 'natural');
        add_unique_key         
-------------------------------
 shifts_job_id_worker_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'houses', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', era_name => 'valid', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'houses', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key  
-----------------
 houses_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'rooms', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'rooms', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key 
----------------
 rooms_id_valid
(1 row)

SELECT sql_saga.add_foreign_key(
    fk_table_oid => 'rooms',
    fk_column_names => ARRAY['house_id'],
    fk_era_name => 'valid',
    unique_key_name => 'houses_id_valid'
);
psql:sql/support/shifts_houses_rooms_enable_saga.sql:18: ERROR:  insert or update on table "rooms" violates foreign key constraint "rooms_house_id_valid"
CONTEXT:  PL/pgSQL function sql_saga.add_foreign_key(regclass,name[],name,name,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions,name,name,name,name,name) line 362 at RAISE
ROLLBACK TO SAVEPOINT s;
-- it fails on a table with a completely-uncovered foreign key
SAVEPOINT s;
INSERT INTO rooms(id,house_id,valid_from,valid_until) VALUES (1, 1, '2010-01-01'::DATE, '2011-01-01'::DATE);
\i sql/support/shifts_houses_rooms_enable_saga.sql
--
-- Activates sql_saga for the shifts, houses, and rooms tables.
-- This was formerly the enable_sql_saga_for_shifts_houses_and_rooms() function.
--
SELECT sql_saga.add_era(table_oid => 'shifts', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'shifts', column_names => ARRAY['job_id','worker_id'], era_name => 'valid', p_key_type => 'natural');
        add_unique_key         
-------------------------------
 shifts_job_id_worker_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'houses', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', era_name => 'valid', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'houses', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key  
-----------------
 houses_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'rooms', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'rooms', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key 
----------------
 rooms_id_valid
(1 row)

SELECT sql_saga.add_foreign_key(
    fk_table_oid => 'rooms',
    fk_column_names => ARRAY['house_id'],
    fk_era_name => 'valid',
    unique_key_name => 'houses_id_valid'
);
psql:sql/support/shifts_houses_rooms_enable_saga.sql:18: ERROR:  insert or update on table "rooms" violates foreign key constraint "rooms_house_id_valid"
CONTEXT:  PL/pgSQL function sql_saga.add_foreign_key(regclass,name[],name,name,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions,name,name,name,name,name) line 362 at RAISE
ROLLBACK TO SAVEPOINT s;
-- it fails on a table with a partially-covered foreign key
SAVEPOINT s;
INSERT INTO rooms(id,house_id,valid_from,valid_until) VALUES (1, 1, '2015-01-01'::DATE, '2018-01-01'::DATE);
\i sql/support/shifts_houses_rooms_enable_saga.sql
--
-- Activates sql_saga for the shifts, houses, and rooms tables.
-- This was formerly the enable_sql_saga_for_shifts_houses_and_rooms() function.
--
SELECT sql_saga.add_era(table_oid => 'shifts', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'shifts', column_names => ARRAY['job_id','worker_id'], era_name => 'valid', p_key_type => 'natural');
        add_unique_key         
-------------------------------
 shifts_job_id_worker_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'houses', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', era_name => 'valid', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'houses', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key  
-----------------
 houses_id_valid
(1 row)

SELECT sql_saga.add_era(table_oid => 'rooms', valid_from_column_name => 'valid_from', valid_until_column_name => 'valid_until', p_add_bounds_check := false);
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key(table_oid => 'rooms', column_names => ARRAY['id'], era_name => 'valid', p_key_type => 'natural');
 add_unique_key 
----------------
 rooms_id_valid
(1 row)

SELECT sql_saga.add_foreign_key(
    fk_table_oid => 'rooms',
    fk_column_names => ARRAY['house_id'],
    fk_era_name => 'valid',
    unique_key_name => 'houses_id_valid'
);
psql:sql/support/shifts_houses_rooms_enable_saga.sql:18: ERROR:  insert or update on table "rooms" violates foreign key constraint "rooms_house_id_valid"
CONTEXT:  PL/pgSQL function sql_saga.add_foreign_key(regclass,name[],name,name,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions,name,name,name,name,name) line 362 at RAISE
ROLLBACK TO SAVEPOINT s;
ROLLBACK;
\i sql/include/test_teardown.sql
--
-- test_teardown.sql
--
-- Common teardown for regression tests. This script drops the unprivileged
-- user role created by test_setup.sql.
--
-- It is important to reset the role first, in case a test fails and
-- leaves the session role set to the user that is about to be dropped.
RESET ROLE;
-- Drop the extensions to ensure a clean state for the next test.
-- Use CASCADE to remove any dependent objects created by sql_saga.
DROP EXTENSION IF EXISTS sql_saga CASCADE;
DROP EXTENSION IF EXISTS btree_gist CASCADE;
-- Revoke any privileges held by the test user and drop any objects they own.
-- This is necessary before the role can be dropped.
DROP OWNED BY sql_saga_unprivileged_user;
DROP ROLE IF EXISTS sql_saga_unprivileged_user;
