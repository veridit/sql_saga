SELECT enable_sql_saga_for_shifts_houses_and_rooms();
 enable_sql_saga_for_shifts_houses_and_rooms 
---------------------------------------------
 
(1 row)

INSERT INTO houses VALUES
  (1, 150000, '2015-01-01'::TIMESTAMPTZ, '2016-01-01'::TIMESTAMPTZ),
  (1, 200000, '2016-01-01'::TIMESTAMPTZ, '2017-01-01'::TIMESTAMPTZ),
  (2, 300000, '2015-01-01'::TIMESTAMPTZ, '2016-01-01'::TIMESTAMPTZ),
  (3, 100000, '2014-01-01'::TIMESTAMPTZ, '2015-01-01'::TIMESTAMPTZ),
  (3, 200000, '2015-01-01'::TIMESTAMPTZ, 'infinity')
;
-- You can delete a pk with no references
DELETE FROM houses WHERE id = 2;
-- You can delete a finite pk range with no references
INSERT INTO rooms VALUES (1, 1, '2016-06-01'::TIMESTAMPTZ, '2017-01-01'::TIMESTAMPTZ);
DELETE FROM houses WHERE id = 1 and tstzrange(valid_after, valid_to) @> '2015-06-01'::timestamptz;
INSERT INTO houses VALUES (1, 200000, '2015-01-01'::TIMESTAMPTZ, '2016-01-01'::TIMESTAMPTZ);
DELETE FROM rooms;
-- You can't delete a finite pk range that is partly covered
INSERT INTO rooms VALUES (1, 1, '2016-01-01'::TIMESTAMPTZ, '2016-06-01'::TIMESTAMPTZ);
DELETE FROM houses WHERE id = 1 and tstzrange(valid_after, valid_to) @> '2016-06-01'::timestamptz;
ERROR:  update or delete on table "houses" violates foreign key constraint "rooms_house_id_valid" on table "rooms"
CONTEXT:  PL/pgSQL function sql_saga.validate_foreign_key_old_row(jsonb,boolean,name,regclass,text,text,text[],text,text,text,regclass,text,text,text[],text,text,text,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions) line 66 at RAISE
SQL statement "SELECT sql_saga.validate_foreign_key_old_row(jold, false /* is_update */, foreign_key_name, fk_table_oid, fk_schema_name, fk_table_name, fk_column_names, fk_era_name, fk_start_after_column_name, fk_stop_on_column_name, uk_table_oid, uk_schema_name, uk_table_name, uk_column_names, uk_era_name, uk_start_after_column_name, uk_stop_on_column_name, match_type, update_action, delete_action)"
PL/pgSQL function sql_saga.uk_delete_check() line 39 at PERFORM
DELETE FROM rooms;
-- You can't delete a finite pk range that is exactly covered
INSERT INTO rooms VALUES (1, 1, '2016-01-01'::TIMESTAMPTZ, '2017-01-01'::TIMESTAMPTZ);
DELETE FROM houses WHERE id = 1 and tstzrange(valid_after, valid_to) @> '2016-06-01'::timestamptz;
ERROR:  update or delete on table "houses" violates foreign key constraint "rooms_house_id_valid" on table "rooms"
CONTEXT:  PL/pgSQL function sql_saga.validate_foreign_key_old_row(jsonb,boolean,name,regclass,text,text,text[],text,text,text,regclass,text,text,text[],text,text,text,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions) line 66 at RAISE
SQL statement "SELECT sql_saga.validate_foreign_key_old_row(jold, false /* is_update */, foreign_key_name, fk_table_oid, fk_schema_name, fk_table_name, fk_column_names, fk_era_name, fk_start_after_column_name, fk_stop_on_column_name, uk_table_oid, uk_schema_name, uk_table_name, uk_column_names, uk_era_name, uk_start_after_column_name, uk_stop_on_column_name, match_type, update_action, delete_action)"
PL/pgSQL function sql_saga.uk_delete_check() line 39 at PERFORM
DELETE FROM rooms;
-- You can't delete a finite pk range that is more than covered
INSERT INTO rooms VALUES (1, 1, '2015-06-01'::TIMESTAMPTZ, '2017-01-01'::TIMESTAMPTZ);
DELETE FROM houses WHERE id = 1 and tstzrange(valid_after, valid_to) @> '2016-06-01'::timestamptz;
ERROR:  update or delete on table "houses" violates foreign key constraint "rooms_house_id_valid" on table "rooms"
CONTEXT:  PL/pgSQL function sql_saga.validate_foreign_key_old_row(jsonb,boolean,name,regclass,text,text,text[],text,text,text,regclass,text,text,text[],text,text,text,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions) line 66 at RAISE
SQL statement "SELECT sql_saga.validate_foreign_key_old_row(jold, false /* is_update */, foreign_key_name, fk_table_oid, fk_schema_name, fk_table_name, fk_column_names, fk_era_name, fk_start_after_column_name, fk_stop_on_column_name, uk_table_oid, uk_schema_name, uk_table_name, uk_column_names, uk_era_name, uk_start_after_column_name, uk_stop_on_column_name, match_type, update_action, delete_action)"
PL/pgSQL function sql_saga.uk_delete_check() line 39 at PERFORM
DELETE FROM rooms;
-- You can delete an infinite pk range with no references
INSERT INTO rooms VALUES (1, 3, '2014-06-01'::TIMESTAMPTZ, '2015-01-01'::TIMESTAMPTZ);
DELETE FROM houses WHERE id = 3 and tstzrange(valid_after, valid_to) @> '2016-01-01'::timestamptz;
INSERT INTO houses VALUES (3, 200000, '2015-01-01'::TIMESTAMPTZ, 'infinity');
DELETE FROM rooms;
-- You can't delete an infinite pk range that is partly covered
INSERT INTO rooms VALUES (1, 3, '2016-01-01'::TIMESTAMPTZ, '2017-01-01'::TIMESTAMPTZ);
DELETE FROM houses WHERE id = 3 and tstzrange(valid_after, valid_to) @> '2016-01-01'::timestamptz;
ERROR:  update or delete on table "houses" violates foreign key constraint "rooms_house_id_valid" on table "rooms"
CONTEXT:  PL/pgSQL function sql_saga.validate_foreign_key_old_row(jsonb,boolean,name,regclass,text,text,text[],text,text,text,regclass,text,text,text[],text,text,text,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions) line 66 at RAISE
SQL statement "SELECT sql_saga.validate_foreign_key_old_row(jold, false /* is_update */, foreign_key_name, fk_table_oid, fk_schema_name, fk_table_name, fk_column_names, fk_era_name, fk_start_after_column_name, fk_stop_on_column_name, uk_table_oid, uk_schema_name, uk_table_name, uk_column_names, uk_era_name, uk_start_after_column_name, uk_stop_on_column_name, match_type, update_action, delete_action)"
PL/pgSQL function sql_saga.uk_delete_check() line 39 at PERFORM
DELETE FROM rooms;
-- You can't delete an infinite pk range that is exactly covered
INSERT INTO rooms VALUES (1, 3, '2015-01-01'::TIMESTAMPTZ, 'infinity');
DELETE FROM houses WHERE id = 3 and tstzrange(valid_after, valid_to) @> '2016-01-01'::timestamptz;
ERROR:  update or delete on table "houses" violates foreign key constraint "rooms_house_id_valid" on table "rooms"
CONTEXT:  PL/pgSQL function sql_saga.validate_foreign_key_old_row(jsonb,boolean,name,regclass,text,text,text[],text,text,text,regclass,text,text,text[],text,text,text,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions) line 66 at RAISE
SQL statement "SELECT sql_saga.validate_foreign_key_old_row(jold, false /* is_update */, foreign_key_name, fk_table_oid, fk_schema_name, fk_table_name, fk_column_names, fk_era_name, fk_start_after_column_name, fk_stop_on_column_name, uk_table_oid, uk_schema_name, uk_table_name, uk_column_names, uk_era_name, uk_start_after_column_name, uk_stop_on_column_name, match_type, update_action, delete_action)"
PL/pgSQL function sql_saga.uk_delete_check() line 39 at PERFORM
DELETE FROM rooms;
-- You can't delete an infinite pk range that is more than covered
INSERT INTO rooms VALUES (1, 3, '2014-06-01'::TIMESTAMPTZ, 'infinity');
DELETE FROM houses WHERE id = 3 and tstzrange(valid_after, valid_to) @> '2016-01-01'::timestamptz;
ERROR:  update or delete on table "houses" violates foreign key constraint "rooms_house_id_valid" on table "rooms"
CONTEXT:  PL/pgSQL function sql_saga.validate_foreign_key_old_row(jsonb,boolean,name,regclass,text,text,text[],text,text,text,regclass,text,text,text[],text,text,text,sql_saga.fk_match_types,sql_saga.fk_actions,sql_saga.fk_actions) line 66 at RAISE
SQL statement "SELECT sql_saga.validate_foreign_key_old_row(jold, false /* is_update */, foreign_key_name, fk_table_oid, fk_schema_name, fk_table_name, fk_column_names, fk_era_name, fk_start_after_column_name, fk_stop_on_column_name, uk_table_oid, uk_schema_name, uk_table_name, uk_column_names, uk_era_name, uk_start_after_column_name, uk_stop_on_column_name, match_type, update_action, delete_action)"
PL/pgSQL function sql_saga.uk_delete_check() line 39 at PERFORM
DELETE FROM rooms;
-- ON DELETE NOACTION
-- (same behavior as RESTRICT, but different entry function so it should have separate tests)
-- TODO: Write some tests against normal FKs just to see NOACTION vs RESTRICT
-- ON DELETE CASCADE
-- TODO
-- ON DELETE SET NULL
-- TODO
-- ON DELETE SET DEFAULT
-- TODO
DELETE FROM rooms;
DELETE FROM houses;
SELECT disable_sql_saga_for_shifts_houses_and_rooms();
 disable_sql_saga_for_shifts_houses_and_rooms 
----------------------------------------------
 
(1 row)

