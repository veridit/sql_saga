BEGIN;
--CREATE EXTENSION sql_saga CASCADE;
\echo '----------------------------------------------------------------------------'
----------------------------------------------------------------------------
\echo 'Test: sql_saga.synchronize_valid_from_after trigger behavior'
Test: sql_saga.synchronize_valid_from_after trigger behavior
\echo '----------------------------------------------------------------------------'
----------------------------------------------------------------------------
SET client_min_messages TO NOTICE;
-- Setup: Create a test table with valid_from, valid_after, and valid_to
CREATE SCHEMA IF NOT EXISTS trigger_test;
CREATE TABLE trigger_test.temporal_table (
    id SERIAL PRIMARY KEY,
    description TEXT,
    valid_after DATE,
    valid_from DATE,
    valid_to DATE NOT NULL,
    CONSTRAINT valid_period_check CHECK (valid_after < valid_to AND valid_from <= valid_to AND valid_from = (valid_after + INTERVAL '1 day'))
);
-- Apply the trigger to the test table
CREATE TRIGGER synchronize_valid_from_after_trigger
BEFORE INSERT OR UPDATE ON trigger_test.temporal_table
FOR EACH ROW EXECUTE FUNCTION sql_saga.synchronize_valid_from_after();
-- Function to display table contents
CREATE OR REPLACE FUNCTION trigger_test.show_table()
RETURNS TABLE (id INT, description TEXT, valid_after DATE, valid_from DATE, valid_to DATE) AS $$
BEGIN
    RETURN QUERY SELECT tt.id, tt.description, tt.valid_after, tt.valid_from, tt.valid_to
                 FROM trigger_test.temporal_table tt ORDER BY tt.id, tt.valid_after;
END;
$$ LANGUAGE plpgsql;
-- Test INSERT scenarios
\echo '--- INSERT Scenarios ---'
--- INSERT Scenarios ---
-- 1. INSERT with only valid_from
\echo 'Test 1: INSERT with only valid_from'
Test 1: INSERT with only valid_from
INSERT INTO trigger_test.temporal_table (description, valid_from, valid_to) VALUES ('Test 1', '2024-01-01', '2024-12-31');
SELECT * FROM trigger_test.show_table(); -- Expected: valid_after = 2023-12-31
 id | description | valid_after | valid_from |  valid_to  
----+-------------+-------------+------------+------------
  1 | Test 1      | 12-31-2023  | 01-01-2024 | 12-31-2024
(1 row)

-- 2. INSERT with only valid_after
\echo 'Test 2: INSERT with only valid_after'
Test 2: INSERT with only valid_after
INSERT INTO trigger_test.temporal_table (description, valid_after, valid_to) VALUES ('Test 2', '2024-01-15', '2024-11-30');
SELECT * FROM trigger_test.show_table(); -- Expected: valid_from = 2024-01-16
 id | description | valid_after | valid_from |  valid_to  
----+-------------+-------------+------------+------------
  1 | Test 1      | 12-31-2023  | 01-01-2024 | 12-31-2024
  2 | Test 2      | 01-15-2024  | 01-16-2024 | 11-30-2024
(2 rows)

-- 3. INSERT with both valid_from and valid_after (consistent)
\echo 'Test 3: INSERT with both valid_from and valid_after (consistent)'
Test 3: INSERT with both valid_from and valid_after (consistent)
INSERT INTO trigger_test.temporal_table (description, valid_from, valid_after, valid_to) VALUES ('Test 3', '2024-02-01', '2024-01-31', '2024-10-31');
SELECT * FROM trigger_test.show_table(); -- Expected: No error, values as inserted
 id | description | valid_after | valid_from |  valid_to  
----+-------------+-------------+------------+------------
  1 | Test 1      | 12-31-2023  | 01-01-2024 | 12-31-2024
  2 | Test 2      | 01-15-2024  | 01-16-2024 | 11-30-2024
  3 | Test 3      | 01-31-2024  | 02-01-2024 | 10-31-2024
(3 rows)

-- 4. INSERT with both valid_from and valid_after (inconsistent) - Expect error
\echo 'Test 4: INSERT with both valid_from and valid_after (inconsistent) - Expect error'
Test 4: INSERT with both valid_from and valid_after (inconsistent) - Expect error
DO $$
BEGIN
    INSERT INTO trigger_test.temporal_table (description, valid_from, valid_after, valid_to) VALUES ('Test 4 Fail', '2024-03-01', '2024-03-01', '2024-09-30');
EXCEPTION WHEN others THEN
    RAISE NOTICE 'Test 4 Caught expected error: %', SQLERRM;
END $$;
NOTICE:  Test 4 Caught expected error: On INSERT, valid_from and valid_after are inconsistent. Expected valid_after = valid_from - 1 day. Got valid_from=03-01-2024, valid_after=03-01-2024
SELECT * FROM trigger_test.show_table(); -- Should not contain 'Test 4 Fail'
 id | description | valid_after | valid_from |  valid_to  
----+-------------+-------------+------------+------------
  1 | Test 1      | 12-31-2023  | 01-01-2024 | 12-31-2024
  2 | Test 2      | 01-15-2024  | 01-16-2024 | 11-30-2024
  3 | Test 3      | 01-31-2024  | 02-01-2024 | 10-31-2024
(3 rows)

-- 5. INSERT with neither valid_from nor valid_after - Expect error
\echo 'Test 5: INSERT with neither valid_from nor valid_after - Expect error'
Test 5: INSERT with neither valid_from nor valid_after - Expect error
DO $$
BEGIN
    INSERT INTO trigger_test.temporal_table (description, valid_to) VALUES ('Test 5 Defaulted But Fails Check', '2024-07-31');
EXCEPTION WHEN others THEN
    RAISE NOTICE 'Test 5 Caught expected error: %', SQLERRM;
END $$;
NOTICE:  Test 5 Caught expected error: new row for relation "temporal_table" violates check constraint "valid_period_check"
SELECT * FROM trigger_test.show_table(); -- Should not contain 'Test 5 Defaulted But Fails Check'
 id | description | valid_after | valid_from |  valid_to  
----+-------------+-------------+------------+------------
  1 | Test 1      | 12-31-2023  | 01-01-2024 | 12-31-2024
  2 | Test 2      | 01-15-2024  | 01-16-2024 | 11-30-2024
  3 | Test 3      | 01-31-2024  | 02-01-2024 | 10-31-2024
(3 rows)

-- Test UPDATE scenarios
\echo '--- UPDATE Scenarios ---'
--- UPDATE Scenarios ---
-- Setup a base row for UPDATE tests
INSERT INTO trigger_test.temporal_table (description, valid_from, valid_after, valid_to) VALUES ('Base Update Row', '2025-01-01', '2024-12-31', '2025-12-31') RETURNING id \gset base_update_id_
-- 6. UPDATE changing valid_from
\echo 'Test 6: UPDATE changing valid_from'
Test 6: UPDATE changing valid_from
UPDATE trigger_test.temporal_table SET valid_from = '2025-02-01' WHERE id = :'base_update_id_id';
SELECT * FROM trigger_test.show_table() WHERE id = :'base_update_id_id'; -- Expected: valid_after = 2025-01-31
 id |   description   | valid_after | valid_from |  valid_to  
----+-----------------+-------------+------------+------------
  6 | Base Update Row | 01-31-2025  | 02-01-2025 | 12-31-2025
(1 row)

-- 7. UPDATE changing valid_after
\echo 'Test 7: UPDATE changing valid_after'
Test 7: UPDATE changing valid_after
UPDATE trigger_test.temporal_table SET valid_after = '2025-02-28' WHERE id = :'base_update_id_id';
SELECT * FROM trigger_test.show_table() WHERE id = :'base_update_id_id'; -- Expected: valid_from = 2025-03-01
 id |   description   | valid_after | valid_from |  valid_to  
----+-----------------+-------------+------------+------------
  6 | Base Update Row | 02-28-2025  | 03-01-2025 | 12-31-2025
(1 row)

-- 8. UPDATE changing valid_from, and valid_after consistently
\echo 'Test 8: UPDATE changing valid_from, and valid_after consistently'
Test 8: UPDATE changing valid_from, and valid_after consistently
UPDATE trigger_test.temporal_table SET valid_from = '2025-04-01', valid_after = '2025-03-31' WHERE id = :'base_update_id_id';
SELECT * FROM trigger_test.show_table() WHERE id = :'base_update_id_id'; -- Expected: No error, values as updated
 id |   description   | valid_after | valid_from |  valid_to  
----+-----------------+-------------+------------+------------
  6 | Base Update Row | 03-31-2025  | 04-01-2025 | 12-31-2025
(1 row)

-- 9. UPDATE changing valid_from, and valid_after inconsistently - Expect error
\echo 'Test 9: UPDATE changing valid_from, and valid_after inconsistently - Expect error'
Test 9: UPDATE changing valid_from, and valid_after inconsistently - Expect error
SET app.current_base_id = :'base_update_id_id';
DO $$
DECLARE
  target_id INT := current_setting('app.current_base_id')::INT;
BEGIN
    UPDATE trigger_test.temporal_table SET valid_from = '2025-05-01', valid_after = '2025-05-01' WHERE id = target_id;
EXCEPTION WHEN others THEN
    RAISE NOTICE 'Test 9 Caught expected error: %', SQLERRM;
END $$;
NOTICE:  Test 9 Caught expected error: On UPDATE for table temporal_table, conflicting explicit values for valid_from and valid_after. With valid_from=05-01-2025, expected valid_after=Wed Apr 30 00:00:00 2025. Got valid_after=05-01-2025
SELECT * FROM trigger_test.show_table() WHERE id = :'base_update_id_id'; -- Should reflect state from Test 8
 id |   description   | valid_after | valid_from |  valid_to  
----+-----------------+-------------+------------+------------
  6 | Base Update Row | 03-31-2025  | 04-01-2025 | 12-31-2025
(1 row)

-- 10. UPDATE setting valid_from to NULL - Expect error
\echo 'Test 10: UPDATE setting valid_from to NULL - Expect error'
Test 10: UPDATE setting valid_from to NULL - Expect error
SET app.current_base_id = :'base_update_id_id';
DO $$
DECLARE
  target_id INT := current_setting('app.current_base_id')::INT;
BEGIN
    UPDATE trigger_test.temporal_table SET valid_from = NULL WHERE id = target_id;
EXCEPTION WHEN others THEN
    RAISE NOTICE 'Test 10 Caught expected error: %', SQLERRM;
END $$;
NOTICE:  Test 10 Caught expected error: On UPDATE for table temporal_table, valid_from cannot be set to NULL. Attempted valid_from=<NULL>, valid_after=03-31-2025
SELECT * FROM trigger_test.show_table() WHERE id = :'base_update_id_id'; -- Should reflect state from Test 8
 id |   description   | valid_after | valid_from |  valid_to  
----+-----------------+-------------+------------+------------
  6 | Base Update Row | 03-31-2025  | 04-01-2025 | 12-31-2025
(1 row)

-- 11. UPDATE setting valid_after to NULL - Expect error
\echo 'Test 11: UPDATE setting valid_after to NULL - Expect error'
Test 11: UPDATE setting valid_after to NULL - Expect error
SET app.current_base_id = :'base_update_id_id';
DO $$
DECLARE
  target_id INT := current_setting('app.current_base_id')::INT;
BEGIN
    UPDATE trigger_test.temporal_table SET valid_after = NULL WHERE id = target_id;
EXCEPTION WHEN others THEN
    RAISE NOTICE 'Test 11 Caught expected error: %', SQLERRM;
END $$;
NOTICE:  Test 11 Caught expected error: On UPDATE for table temporal_table, valid_after cannot be set to NULL. Attempted valid_from=04-01-2025, valid_after=<NULL>
SELECT * FROM trigger_test.show_table() WHERE id = :'base_update_id_id'; -- Should reflect state from Test 8
 id |   description   | valid_after | valid_from |  valid_to  
----+-----------------+-------------+------------+------------
  6 | Base Update Row | 03-31-2025  | 04-01-2025 | 12-31-2025
(1 row)

-- 12. UPDATE changing only valid_to (should not affect valid_from/valid_after)
\echo 'Test 12: UPDATE changing only valid_to'
Test 12: UPDATE changing only valid_to
UPDATE trigger_test.temporal_table SET valid_to = '2026-01-31' WHERE id = :'base_update_id_id';
SELECT * FROM trigger_test.show_table() WHERE id = :'base_update_id_id'; -- Expected: valid_from/valid_after as per Test 8, valid_to updated
 id |   description   | valid_after | valid_from |  valid_to  
----+-----------------+-------------+------------+------------
  6 | Base Update Row | 03-31-2025  | 04-01-2025 | 01-31-2026
(1 row)

-- Cleanup
DROP TABLE trigger_test.temporal_table; -- Trigger will be dropped with the table
DROP FUNCTION trigger_test.show_table();
DROP SCHEMA trigger_test CASCADE;
ROLLBACK;
