\i sql/include/test_setup.sql
--
-- test_setup.sql
--
-- Common setup for regression tests that need to be self-contained.
-- This script creates the extension, a user role, and grants permissions.
--
SET datestyle = 'ISO, YMD';
CREATE EXTENSION IF NOT EXISTS btree_gist;
CREATE EXTENSION IF NOT EXISTS sql_saga CASCADE;
DO $$
BEGIN
    CREATE ROLE sql_saga_unprivileged_user;
EXCEPTION WHEN duplicate_object THEN
END
$$;
GRANT USAGE ON SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT SELECT ON ALL TABLES IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
/*
 * Allow the unprivileged user to create tables in the public schema.
 * This is required for tests that create their own tables.
 * PG 15+ restricts this by default.
 */
GRANT CREATE ON SCHEMA public TO PUBLIC;
BEGIN;
-- This test reproduces a bug where temporal_merge_plan generates
-- a syntactically incorrect query when called from a trigger.
CREATE TABLE tm_bug_target (
    id int,
    value text,
    valid_from date,
    valid_until date
);
SELECT sql_saga.add_era('tm_bug_target', 'valid_from', 'valid_until');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key('tm_bug_target', ARRAY['id']);
     add_unique_key     
------------------------
 tm_bug_target_id_valid
(1 row)

CREATE TEMP TABLE tm_bug_source (
    row_id int,
    id int,
    value text,
    valid_from date,
    valid_until date
);
INSERT INTO tm_bug_source VALUES (1, 1, 'new value', '2024-01-01', 'infinity');
-- This call mimics a pure-insert scenario and should fail, then succeed after the fix.
-- Using an empty p_identity_columns array is the key to reproducing the bug.
CALL sql_saga.temporal_merge(
    p_target_table      := 'tm_bug_target'::regclass,
    p_source_table      := 'tm_bug_source'::regclass,
    p_identity_columns        := '{}'::text[],
    p_ephemeral_columns := '{}'::text[],
    p_mode              := 'INSERT_NEW_ENTITIES'::sql_saga.temporal_merge_mode
);
-- Verify the merge was successful
TABLE tm_bug_target;
 id |   value   | valid_from | valid_until 
----+-----------+------------+-------------
  1 | new value | 2024-01-01 | infinity
(1 row)

ROLLBACK;
\i sql/include/test_teardown.sql
--
-- test_teardown.sql
--
-- Common teardown for regression tests. This script drops the unprivileged
-- user role created by test_setup.sql.
--
-- It is important to reset the role first, in case a test fails and
-- leaves the session role set to the user that is about to be dropped.
RESET ROLE;
-- Drop the extensions to ensure a clean state for the next test.
-- Use CASCADE to remove any dependent objects created by sql_saga.
DROP EXTENSION IF EXISTS sql_saga CASCADE;
DROP EXTENSION IF EXISTS btree_gist CASCADE;
-- Revoke any privileges held by the test user and drop any objects they own.
-- This is necessary before the role can be dropped.
DROP OWNED BY sql_saga_unprivileged_user;
DROP ROLE IF EXISTS sql_saga_unprivileged_user;
