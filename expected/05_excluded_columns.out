--
-- Test for handling of various generated/identity columns
-- in the FOR PORTION OF update trigger.
--
-- The update_portion_of() trigger function must correctly identify and
-- exclude all varieties of generated columns (SERIAL, IDENTITY, STORED)
-- from the INSERT statements it dynamically generates when splitting a row.
--
\i sql/include/test_setup.sql
--
-- test_setup.sql
--
-- Common setup for regression tests that need to be self-contained.
-- This script creates the extension, a user role, and grants permissions.
--
CREATE EXTENSION IF NOT EXISTS btree_gist;
CREATE EXTENSION IF NOT EXISTS sql_saga CASCADE;
DO $$
BEGIN
    CREATE ROLE sql_saga_unprivileged_user;
EXCEPTION WHEN duplicate_object THEN
END
$$;
GRANT USAGE ON SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT SELECT ON ALL TABLES IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
/*
 * Allow the unprivileged user to create tables in the public schema.
 * This is required for tests that create their own tables.
 * PG 15+ restricts this by default.
 */
GRANT CREATE ON SCHEMA public TO PUBLIC;
BEGIN;
SET ROLE TO sql_saga_unprivileged_user;
CREATE TABLE gen_cols_test (
    id_serial BIGSERIAL,
    id_gen_default BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_gen_always BIGINT GENERATED ALWAYS AS IDENTITY,
    id_stored BIGINT GENERATED ALWAYS AS (id_serial * 2) STORED,
    product TEXT,
    """from""" INTEGER,
    """until""" INTEGER,
    price NUMERIC
);
-- Add sql_saga features with non-standard, quoted column names
SELECT sql_saga.add_era('gen_cols_test', '"from"', '"until"', 'p');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_api('gen_cols_test', 'p');
 add_api 
---------
 t
(1 row)

-- Insert initial data
INSERT INTO gen_cols_test (product, """from""", """until""", price) VALUES ('Widget', 10, 20, 100);
TABLE gen_cols_test;
 id_serial | id_gen_default | id_gen_always | id_stored | product | "from" | "until" | price 
-----------+----------------+---------------+-----------+---------+--------+---------+-------
         1 |              1 |             1 |         2 | Widget  |     10 |      20 |   100
(1 row)

-- Perform an update that splits the existing row.
-- This will trigger an INSERT within the update_portion_of function.
-- If the generated columns are not correctly excluded from the INSERT,
-- this statement will fail, especially for the GENERATED ALWAYS columns.
UPDATE gen_cols_test__for_portion_of_p SET """from""" = 15, """until""" = 20, price = 80;
-- Verify the result. We expect two rows now.
TABLE gen_cols_test ORDER BY """from""";
 id_serial | id_gen_default | id_gen_always | id_stored | product | "from" | "until" | price 
-----------+----------------+---------------+-----------+---------+--------+---------+-------
         2 |              2 |             2 |         4 | Widget  |     10 |      15 |   100
         1 |              1 |             1 |         2 | Widget  |     15 |      20 |    80
(2 rows)

-- Clean up
SELECT sql_saga.drop_api('gen_cols_test', 'p');
 drop_api 
----------
 t
(1 row)

SELECT sql_saga.drop_era('gen_cols_test', 'p');
 drop_era 
----------
 t
(1 row)

DROP TABLE gen_cols_test;
ROLLBACK;
\i sql/include/test_teardown.sql
--
-- test_teardown.sql
--
-- Common teardown for regression tests. This script drops the unprivileged
-- user role created by test_setup.sql.
--
-- It is important to reset the role first, in case a test fails and
-- leaves the session role set to the user that is about to be dropped.
RESET ROLE;
-- Drop the extensions to ensure a clean state for the next test.
-- Use CASCADE to remove any dependent objects created by sql_saga.
DROP EXTENSION IF EXISTS sql_saga CASCADE;
DROP EXTENSION IF EXISTS btree_gist;
-- Revoke any privileges held by the test user and drop any objects they own.
-- This is necessary before the role can be dropped.
DROP OWNED BY sql_saga_unprivileged_user;
DROP ROLE IF EXISTS sql_saga_unprivileged_user;
