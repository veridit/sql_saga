\i sql/include/test_setup.sql
--
-- test_setup.sql
--
-- Common setup for regression tests that need to be self-contained.
-- This script creates the extension, a user role, and grants permissions.
--
SET datestyle = 'ISO, YMD';
CREATE EXTENSION IF NOT EXISTS btree_gist;
CREATE EXTENSION IF NOT EXISTS sql_saga CASCADE;
DO $$
BEGIN
    CREATE ROLE sql_saga_unprivileged_user;
EXCEPTION WHEN duplicate_object THEN
END
$$;
GRANT USAGE ON SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT SELECT ON ALL TABLES IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
/*
 * Allow the unprivileged user to create tables in the public schema.
 * This is required for tests that create their own tables.
 * PG 15+ restricts this by default.
 */
GRANT CREATE ON SCHEMA public TO PUBLIC;
BEGIN;
\echo '----------------------------------------------------------------------------'
----------------------------------------------------------------------------
\echo 'Test Suite: `..._FOR_PORTION_OF` Mode Edge Cases'
Test Suite: `..._FOR_PORTION_OF` Mode Edge Cases
\echo 'Description:'
Description:
\echo '  This test suite verifies the behavior of the `..._FOR_PORTION_OF` modes'
  This test suite verifies the behavior of the `..._FOR_PORTION_OF` modes
\echo '  with a focus on complex timeline interactions, such as operations that'
  with a focus on complex timeline interactions, such as operations that
\echo '  straddle adjacent historical slices.'
  straddle adjacent historical slices.
\echo '----------------------------------------------------------------------------'
----------------------------------------------------------------------------
SET client_min_messages TO WARNING;
CREATE SCHEMA tm_portion_of;
CREATE TABLE tm_portion_of.target(
    id int,
    payload TEXT,
    edit_comment TEXT,
    valid_from DATE,
    valid_until DATE
);
SELECT sql_saga.add_era('tm_portion_of.target'::regclass, 'valid_from', 'valid_until', 'valid');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key('tm_portion_of.target'::regclass, '{id}', 'valid');
 add_unique_key  
-----------------
 target_id_valid
(1 row)

-- Helper function to reset target state
CREATE OR REPLACE PROCEDURE tm_portion_of.reset_target() AS $$
BEGIN
    TRUNCATE tm_portion_of.target;
    -- Target entity has two adjacent periods, a gap, and a final period
    INSERT INTO tm_portion_of.target (id, payload, edit_comment, valid_from, valid_until) VALUES
        (1, 'A-1', 'Adjacent 1', '2021-01-01', '2022-01-01'),
        (1, 'A-2', 'Adjacent 2', '2022-01-01', '2023-01-01'),
        (1, 'B-1', 'After Gap',  '2024-01-01', '2025-01-01');
END;
$$ LANGUAGE plpgsql;
--------------------------------------------------------------------------------
\echo 'Scenario 1: `PATCH_FOR_PORTION_OF` performs a surgical patch straddling adjacent slices'
Scenario 1: `PATCH_FOR_PORTION_OF` performs a surgical patch straddling adjacent slices
--------------------------------------------------------------------------------
SAVEPOINT s1;
CALL tm_portion_of.reset_target();
CREATE TEMP TABLE source_1 (row_id int, id int, payload text, edit_comment text, valid_from date, valid_until date) ON COMMIT DROP;
-- A straddling change that covers half of each adjacent period
INSERT INTO source_1 (row_id, id, payload, edit_comment, valid_from, valid_until) VALUES
    (101, 1, 'Patched-Straddle', 'Surgical Patch Straddling', '2021-07-01', '2022-07-01');
\echo '--- Target: Initial State ---'
--- Target: Initial State ---
TABLE tm_portion_of.target ORDER BY id, valid_from;
 id | payload | edit_comment | valid_from | valid_until 
----+---------+--------------+------------+-------------
  1 | A-1     | Adjacent 1   | 2021-01-01 | 2022-01-01
  1 | A-2     | Adjacent 2   | 2022-01-01 | 2023-01-01
  1 | B-1     | After Gap    | 2024-01-01 | 2025-01-01
(3 rows)

\echo '--- Source: Data to merge ---'
--- Source: Data to merge ---
TABLE source_1 ORDER BY row_id;
 row_id | id |     payload      |       edit_comment        | valid_from | valid_until 
--------+----+------------------+---------------------------+------------+-------------
    101 |  1 | Patched-Straddle | Surgical Patch Straddling | 2021-07-01 | 2022-07-01
(1 row)

CALL sql_saga.temporal_merge(p_target_table => 'tm_portion_of.target'::regclass, p_source_table => 'source_1'::regclass, p_identity_columns => '{id}'::text[], p_ephemeral_columns => '{edit_comment}'::text[], p_mode => 'PATCH_FOR_PORTION_OF'::sql_saga.temporal_merge_mode, p_era_name => 'valid');
\echo '--- Planner: Actual Plan ---'
--- Planner: Actual Plan ---
TABLE pg_temp.temporal_merge_plan ORDER BY plan_op_seq;
 plan_op_seq | source_row_ids |   operation    | timeline_update_effect | entity_ids | old_valid_from | old_valid_until | new_valid_from | new_valid_until |                                     data                                     | relation 
-------------+----------------+----------------+------------------------+------------+----------------+-----------------+----------------+-----------------+------------------------------------------------------------------------------+----------
           1 | {101}          | INSERT         |                        | {"id": 1}  |                |                 | 2021-07-01     | 2022-07-01      | {"payload": "Patched-Straddle", "edit_comment": "Surgical Patch Straddling"} | 
           2 | {101}          | UPDATE         | SHRINK                 | {"id": 1}  | 2021-01-01     | 2022-01-01      | 2021-01-01     | 2021-07-01      | {"payload": "A-1", "edit_comment": "Adjacent 1"}                             | starts
           3 | {101}          | UPDATE         | SHRINK                 | {"id": 1}  | 2022-01-01     | 2023-01-01      | 2022-07-01     | 2023-01-01      | {"payload": "A-2", "edit_comment": "Adjacent 2"}                             | finishes
           4 |                | SKIP_IDENTICAL |                        | {"id": 1}  | 2024-01-01     | 2025-01-01      | 2024-01-01     | 2025-01-01      | {"payload": "B-1", "edit_comment": "After Gap"}                              | equals
(4 rows)

\echo '--- Executor: Actual Feedback ---'
--- Executor: Actual Feedback ---
TABLE pg_temp.temporal_merge_feedback ORDER BY source_row_id;
 source_row_id | target_entity_ids | status  | error_message 
---------------+-------------------+---------+---------------
           101 | [{"id": 1}]       | APPLIED | 
(1 row)

\echo '--- Target: Expected Final State ---'
--- Target: Expected Final State ---
SELECT * FROM (VALUES
    (1, 'A-1', 'Adjacent 1', '2021-01-01'::date, '2021-07-01'::date),
    (1, 'Patched-Straddle', 'Surgical Patch Straddling', '2021-07-01'::date, '2022-07-01'::date),
    (1, 'A-2', 'Adjacent 2', '2022-07-01'::date, '2023-01-01'::date),
    (1, 'B-1', 'After Gap', '2024-01-01'::date, '2025-01-01'::date)
) AS v(id, payload, edit_comment, valid_from, valid_until) ORDER BY id, valid_from;
 id |     payload      |       edit_comment        | valid_from | valid_until 
----+------------------+---------------------------+------------+-------------
  1 | A-1              | Adjacent 1                | 2021-01-01 | 2021-07-01
  1 | Patched-Straddle | Surgical Patch Straddling | 2021-07-01 | 2022-07-01
  1 | A-2              | Adjacent 2                | 2022-07-01 | 2023-01-01
  1 | B-1              | After Gap                 | 2024-01-01 | 2025-01-01
(4 rows)

\echo '--- Target: Final State ---'
--- Target: Final State ---
TABLE tm_portion_of.target ORDER BY id, valid_from;
 id |     payload      |       edit_comment        | valid_from | valid_until 
----+------------------+---------------------------+------------+-------------
  1 | A-1              | Adjacent 1                | 2021-01-01 | 2021-07-01
  1 | Patched-Straddle | Surgical Patch Straddling | 2021-07-01 | 2022-07-01
  1 | A-2              | Adjacent 2                | 2022-07-01 | 2023-01-01
  1 | B-1              | After Gap                 | 2024-01-01 | 2025-01-01
(4 rows)

ROLLBACK TO SAVEPOINT s1;
--------------------------------------------------------------------------------
\echo 'Scenario 2: `REPLACE_FOR_PORTION_OF` performs a surgical replacement straddling adjacent slices'
Scenario 2: `REPLACE_FOR_PORTION_OF` performs a surgical replacement straddling adjacent slices
--------------------------------------------------------------------------------
SAVEPOINT s2;
CALL tm_portion_of.reset_target();
CREATE TEMP TABLE source_2 (row_id int, id int, payload text, edit_comment text, valid_from date, valid_until date) ON COMMIT DROP;
-- A straddling change that covers half of each adjacent period
INSERT INTO source_2 (row_id, id, payload, edit_comment, valid_from, valid_until) VALUES
    (201, 1, 'Replaced-Straddle', 'Surgical Replace Straddling', '2021-07-01', '2022-07-01');
\echo '--- Target: Initial State ---'
--- Target: Initial State ---
TABLE tm_portion_of.target ORDER BY id, valid_from;
 id | payload | edit_comment | valid_from | valid_until 
----+---------+--------------+------------+-------------
  1 | A-1     | Adjacent 1   | 2021-01-01 | 2022-01-01
  1 | A-2     | Adjacent 2   | 2022-01-01 | 2023-01-01
  1 | B-1     | After Gap    | 2024-01-01 | 2025-01-01
(3 rows)

\echo '--- Source: Data to merge ---'
--- Source: Data to merge ---
TABLE source_2 ORDER BY row_id;
 row_id | id |      payload      |        edit_comment         | valid_from | valid_until 
--------+----+-------------------+-----------------------------+------------+-------------
    201 |  1 | Replaced-Straddle | Surgical Replace Straddling | 2021-07-01 | 2022-07-01
(1 row)

CALL sql_saga.temporal_merge(p_target_table => 'tm_portion_of.target'::regclass, p_source_table => 'source_2'::regclass, p_identity_columns => '{id}'::text[], p_ephemeral_columns => '{edit_comment}'::text[], p_mode => 'REPLACE_FOR_PORTION_OF'::sql_saga.temporal_merge_mode, p_era_name => 'valid');
\echo '--- Planner: Actual Plan ---'
--- Planner: Actual Plan ---
TABLE pg_temp.temporal_merge_plan ORDER BY plan_op_seq;
 plan_op_seq | source_row_ids |   operation    | timeline_update_effect | entity_ids | old_valid_from | old_valid_until | new_valid_from | new_valid_until |                                      data                                       | relation 
-------------+----------------+----------------+------------------------+------------+----------------+-----------------+----------------+-----------------+---------------------------------------------------------------------------------+----------
           1 | {201}          | INSERT         |                        | {"id": 1}  |                |                 | 2021-07-01     | 2022-07-01      | {"payload": "Replaced-Straddle", "edit_comment": "Surgical Replace Straddling"} | 
           2 | {201}          | UPDATE         | SHRINK                 | {"id": 1}  | 2021-01-01     | 2022-01-01      | 2021-01-01     | 2021-07-01      | {"payload": "A-1", "edit_comment": "Adjacent 1"}                                | starts
           3 | {201}          | UPDATE         | SHRINK                 | {"id": 1}  | 2022-01-01     | 2023-01-01      | 2022-07-01     | 2023-01-01      | {"payload": "A-2", "edit_comment": "Adjacent 2"}                                | finishes
           4 |                | SKIP_IDENTICAL |                        | {"id": 1}  | 2024-01-01     | 2025-01-01      | 2024-01-01     | 2025-01-01      | {"payload": "B-1", "edit_comment": "After Gap"}                                 | equals
(4 rows)

\echo '--- Executor: Actual Feedback ---'
--- Executor: Actual Feedback ---
TABLE pg_temp.temporal_merge_feedback ORDER BY source_row_id;
 source_row_id | target_entity_ids | status  | error_message 
---------------+-------------------+---------+---------------
           201 | [{"id": 1}]       | APPLIED | 
(1 row)

\echo '--- Target: Expected Final State ---'
--- Target: Expected Final State ---
SELECT * FROM (VALUES
    (1, 'A-1', 'Adjacent 1', '2021-01-01'::date, '2021-07-01'::date),
    (1, 'Replaced-Straddle', 'Surgical Replace Straddling', '2021-07-01'::date, '2022-07-01'::date),
    (1, 'A-2', 'Adjacent 2', '2022-07-01'::date, '2023-01-01'::date),
    (1, 'B-1', 'After Gap', '2024-01-01'::date, '2025-01-01'::date)
) AS v(id, payload, edit_comment, valid_from, valid_until) ORDER BY id, valid_from;
 id |      payload      |        edit_comment         | valid_from | valid_until 
----+-------------------+-----------------------------+------------+-------------
  1 | A-1               | Adjacent 1                  | 2021-01-01 | 2021-07-01
  1 | Replaced-Straddle | Surgical Replace Straddling | 2021-07-01 | 2022-07-01
  1 | A-2               | Adjacent 2                  | 2022-07-01 | 2023-01-01
  1 | B-1               | After Gap                   | 2024-01-01 | 2025-01-01
(4 rows)

\echo '--- Target: Final State ---'
--- Target: Final State ---
TABLE tm_portion_of.target ORDER BY id, valid_from;
 id |      payload      |        edit_comment         | valid_from | valid_until 
----+-------------------+-----------------------------+------------+-------------
  1 | A-1               | Adjacent 1                  | 2021-01-01 | 2021-07-01
  1 | Replaced-Straddle | Surgical Replace Straddling | 2021-07-01 | 2022-07-01
  1 | A-2               | Adjacent 2                  | 2022-07-01 | 2023-01-01
  1 | B-1               | After Gap                   | 2024-01-01 | 2025-01-01
(4 rows)

ROLLBACK TO SAVEPOINT s2;
--------------------------------------------------------------------------------
\echo 'Scenario 3: `DELETE_FOR_PORTION_OF` carves out a piece of the timeline straddling adjacent slices'
Scenario 3: `DELETE_FOR_PORTION_OF` carves out a piece of the timeline straddling adjacent slices
--------------------------------------------------------------------------------
SAVEPOINT s3;
CALL tm_portion_of.reset_target();
CREATE TEMP TABLE source_3 (row_id int, id int, payload text, edit_comment text, valid_from date, valid_until date) ON COMMIT DROP;
-- A straddling delete that covers half of each adjacent period
INSERT INTO source_3 (row_id, id, payload, edit_comment, valid_from, valid_until) VALUES
    (301, 1, '__DELETE__', 'Surgical Delete Straddling', '2021-07-01', '2022-07-01');
\echo '--- Target: Initial State ---'
--- Target: Initial State ---
TABLE tm_portion_of.target ORDER BY id, valid_from;
 id | payload | edit_comment | valid_from | valid_until 
----+---------+--------------+------------+-------------
  1 | A-1     | Adjacent 1   | 2021-01-01 | 2022-01-01
  1 | A-2     | Adjacent 2   | 2022-01-01 | 2023-01-01
  1 | B-1     | After Gap    | 2024-01-01 | 2025-01-01
(3 rows)

\echo '--- Source: Data to merge ---'
--- Source: Data to merge ---
TABLE source_3 ORDER BY row_id;
 row_id | id |  payload   |        edit_comment        | valid_from | valid_until 
--------+----+------------+----------------------------+------------+-------------
    301 |  1 | __DELETE__ | Surgical Delete Straddling | 2021-07-01 | 2022-07-01
(1 row)

CALL sql_saga.temporal_merge(p_target_table => 'tm_portion_of.target'::regclass, p_source_table => 'source_3'::regclass, p_identity_columns => '{id}'::text[], p_ephemeral_columns => '{edit_comment}'::text[], p_mode => 'DELETE_FOR_PORTION_OF'::sql_saga.temporal_merge_mode, p_era_name => 'valid');
\echo '--- Planner: Actual Plan ---'
--- Planner: Actual Plan ---
TABLE pg_temp.temporal_merge_plan ORDER BY plan_op_seq;
 plan_op_seq | source_row_ids |   operation    | timeline_update_effect | entity_ids | old_valid_from | old_valid_until | new_valid_from | new_valid_until |                       data                       | relation 
-------------+----------------+----------------+------------------------+------------+----------------+-----------------+----------------+-----------------+--------------------------------------------------+----------
           1 | {301}          | UPDATE         | SHRINK                 | {"id": 1}  | 2021-01-01     | 2022-01-01      | 2021-01-01     | 2021-07-01      | {"payload": "A-1", "edit_comment": "Adjacent 1"} | starts
           2 | {301}          | UPDATE         | SHRINK                 | {"id": 1}  | 2022-01-01     | 2023-01-01      | 2022-07-01     | 2023-01-01      | {"payload": "A-2", "edit_comment": "Adjacent 2"} | finishes
           3 | {301}          | SKIP_IDENTICAL |                        | {"id": 1}  |                |                 | 2021-07-01     | 2022-07-01      |                                                  | 
           4 |                | SKIP_IDENTICAL |                        | {"id": 1}  | 2024-01-01     | 2025-01-01      | 2024-01-01     | 2025-01-01      | {"payload": "B-1", "edit_comment": "After Gap"}  | equals
(4 rows)

\echo '--- Executor: Actual Feedback ---'
--- Executor: Actual Feedback ---
TABLE pg_temp.temporal_merge_feedback ORDER BY source_row_id;
 source_row_id | target_entity_ids | status  | error_message 
---------------+-------------------+---------+---------------
           301 | [{"id": 1}]       | APPLIED | 
(1 row)

\echo '--- Target: Expected Final State ---'
--- Target: Expected Final State ---
SELECT * FROM (VALUES
    (1, 'A-1', 'Adjacent 1', '2021-01-01'::date, '2021-07-01'::date),
    (1, 'A-2', 'Adjacent 2', '2022-07-01'::date, '2023-01-01'::date),
    (1, 'B-1', 'After Gap', '2024-01-01'::date, '2025-01-01'::date)
) AS v(id, payload, edit_comment, valid_from, valid_until) ORDER BY id, valid_from;
 id | payload | edit_comment | valid_from | valid_until 
----+---------+--------------+------------+-------------
  1 | A-1     | Adjacent 1   | 2021-01-01 | 2021-07-01
  1 | A-2     | Adjacent 2   | 2022-07-01 | 2023-01-01
  1 | B-1     | After Gap    | 2024-01-01 | 2025-01-01
(3 rows)

\echo '--- Target: Final State ---'
--- Target: Final State ---
TABLE tm_portion_of.target ORDER BY id, valid_from;
 id | payload | edit_comment | valid_from | valid_until 
----+---------+--------------+------------+-------------
  1 | A-1     | Adjacent 1   | 2021-01-01 | 2021-07-01
  1 | A-2     | Adjacent 2   | 2022-07-01 | 2023-01-01
  1 | B-1     | After Gap    | 2024-01-01 | 2025-01-01
(3 rows)

ROLLBACK TO SAVEPOINT s3;
ROLLBACK;
\i sql/include/test_teardown.sql
--
-- test_teardown.sql
--
-- Common teardown for regression tests. This script drops the unprivileged
-- user role created by test_setup.sql.
--
-- It is important to reset the role first, in case a test fails and
-- leaves the session role set to the user that is about to be dropped.
RESET ROLE;
-- Drop the extensions to ensure a clean state for the next test.
-- Use CASCADE to remove any dependent objects created by sql_saga.
DROP EXTENSION IF EXISTS sql_saga CASCADE;
DROP EXTENSION IF EXISTS btree_gist CASCADE;
-- Revoke any privileges held by the test user and drop any objects they own.
-- This is necessary before the role can be dropped.
DROP OWNED BY sql_saga_unprivileged_user;
DROP ROLE IF EXISTS sql_saga_unprivileged_user;
