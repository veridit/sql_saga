\i sql/include/test_setup.sql
--
-- test_setup.sql
--
-- Common setup for regression tests that need to be self-contained.
-- This script creates the extension, a user role, and grants permissions.
--
SET datestyle = 'ISO, YMD';
CREATE EXTENSION IF NOT EXISTS btree_gist;
CREATE EXTENSION IF NOT EXISTS sql_saga CASCADE;
DO $$
BEGIN
    CREATE ROLE sql_saga_unprivileged_user;
EXCEPTION WHEN duplicate_object THEN
END
$$;
GRANT USAGE ON SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT SELECT ON ALL TABLES IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
/*
 * Allow the unprivileged user to create tables in the public schema.
 * This is required for tests that create their own tables.
 * PG 15+ restricts this by default.
 */
GRANT CREATE ON SCHEMA public TO PUBLIC;
BEGIN;
-- Test validation for SCD-2 incompatible schemas
\echo '--- Temporal Primary Key: Validation for SCD-2 incompatible schemas ---'
--- Temporal Primary Key: Validation for SCD-2 incompatible schemas ---
-- Scenario 1: Table with a simple, non-temporal PRIMARY KEY
CREATE TABLE incompatible_pk (
    id serial PRIMARY KEY,
    value text,
    valid_from date,
    valid_until date
);
-- This should issue a WARNING because of the simple PRIMARY KEY.
SELECT sql_saga.add_era('incompatible_pk');
WARNING:  Table "incompatible_pk" has a simple PRIMARY KEY that does not include temporal columns. This schema is incompatible with SCD Type 2 history.
HINT:  If you plan to use a temporal primary key for this era, you must use a composite primary key that includes a temporal column (e.g., PRIMARY KEY (id, valid_from)).
 add_era 
---------
 t
(1 row)

-- This should fail because the primary key on (id) does not include temporal columns.
DO $$
BEGIN
    PERFORM sql_saga.add_unique_key(
        table_oid => 'incompatible_pk',
        column_names => ARRAY['id'],
        key_type => 'primary'
    );
    RAISE EXCEPTION 'add_unique_key should have failed for incompatible PRIMARY KEY';
EXCEPTION WHEN others THEN
    RAISE NOTICE 'Caught expected error: %', SQLERRM;
END;
$$;
NOTICE:  Caught expected error: table "incompatible_pk" has a simple PRIMARY KEY that does not include the temporal columns; this is incompatible with SCD Type 2 history
-- Scenario 2: Table with GENERATED ALWAYS AS IDENTITY
CREATE TABLE incompatible_identity (
    id int GENERATED ALWAYS AS IDENTITY,
    value text,
    valid_from date,
    valid_until date
);
-- This should issue a WARNING because of the GENERATED ALWAYS column.
SELECT sql_saga.add_era('incompatible_identity');
WARNING:  Table "incompatible_identity" has a GENERATED ALWAYS AS IDENTITY column ("id"). This schema is incompatible with SCD Type 2 history.
HINT:  If you plan to use a temporal primary key for this era, the identity column must be GENERATED BY DEFAULT AS IDENTITY to allow inserting historical records.
 add_era 
---------
 t
(1 row)

-- This should fail because GENERATED ALWAYS is incompatible with SCD-2 history.
DO $$
BEGIN
    PERFORM sql_saga.add_unique_key(
        table_oid => 'incompatible_identity',
        column_names => ARRAY['id'],
        key_type => 'primary'
    );
    RAISE EXCEPTION 'add_unique_key should have failed for GENERATED ALWAYS AS IDENTITY';
EXCEPTION WHEN others THEN
    RAISE NOTICE 'Caught expected error: %', SQLERRM;
END;
$$;
NOTICE:  Caught expected error: table "incompatible_identity" has a GENERATED ALWAYS AS IDENTITY column ("id"); this is incompatible with SCD Type 2 history as it prevents inserting new historical versions of an entity
ROLLBACK;
\i sql/include/test_teardown.sql
--
-- test_teardown.sql
--
-- Common teardown for regression tests. This script drops the unprivileged
-- user role created by test_setup.sql.
--
-- It is important to reset the role first, in case a test fails and
-- leaves the session role set to the user that is about to be dropped.
RESET ROLE;
-- Drop the extensions to ensure a clean state for the next test.
-- Use CASCADE to remove any dependent objects created by sql_saga.
DROP EXTENSION IF EXISTS sql_saga CASCADE;
DROP EXTENSION IF EXISTS btree_gist CASCADE;
-- Revoke any privileges held by the test user and drop any objects they own.
-- This is necessary before the role can be dropped.
DROP OWNED BY sql_saga_unprivileged_user;
DROP ROLE IF EXISTS sql_saga_unprivileged_user;
