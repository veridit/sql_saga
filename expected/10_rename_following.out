\i sql/include/test_setup.sql
--
-- test_setup.sql
--
-- Common setup for regression tests that need to be self-contained.
-- This script creates the extension, a user role, and grants permissions.
--
SET datestyle = 'ISO, YMD';
CREATE EXTENSION IF NOT EXISTS btree_gist;
CREATE EXTENSION IF NOT EXISTS sql_saga CASCADE;
DO $$
BEGIN
    CREATE ROLE sql_saga_unprivileged_user;
EXCEPTION WHEN duplicate_object THEN
END
$$;
GRANT USAGE ON SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT SELECT ON ALL TABLES IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
/*
 * Allow the unprivileged user to create tables in the public schema.
 * This is required for tests that create their own tables.
 * PG 15+ restricts this by default.
 */
GRANT CREATE ON SCHEMA public TO PUBLIC;
BEGIN;
/* Run tests as unprivileged user */
SET ROLE TO sql_saga_unprivileged_user;
/* DDL on unrelated tables should not be affected */
CREATE TABLE unrelated(a int);
ALTER TABLE unrelated RENAME a TO b;
DROP TABLE unrelated;
/*
 * If anything we store as "name" is renamed, we need to update our catalogs or
 * throw an error.
 */
/* era */
CREATE TABLE rename_test(col1 text, col2 bigint, col3 time, s integer, e integer);
SELECT sql_saga.add_era('rename_test', 's', 'e', 'p');
 add_era 
---------
 t
(1 row)

TABLE sql_saga.era;
 table_schema | table_name  | era_name | valid_from_column_name | valid_until_column_name | range_type | bounds_check_constraint | audit_schema_name | audit_table_name 
--------------+-------------+----------+------------------------+-------------------------+------------+-------------------------+-------------------+------------------
 public       | rename_test | p        | s                      | e                       | int4range  | rename_test_p_check     |                   | 
(1 row)

ALTER TABLE rename_test RENAME s TO start;
ALTER TABLE rename_test RENAME e TO "end";
TABLE sql_saga.era;
 table_schema | table_name  | era_name | valid_from_column_name | valid_until_column_name | range_type | bounds_check_constraint | audit_schema_name | audit_table_name 
--------------+-------------+----------+------------------------+-------------------------+------------+-------------------------+-------------------+------------------
 public       | rename_test | p        | start                  | end                     | int4range  | rename_test_p_check     |                   | 
(1 row)

ALTER TABLE rename_test RENAME start TO "s < e";
TABLE sql_saga.era;
 table_schema | table_name  | era_name | valid_from_column_name | valid_until_column_name | range_type | bounds_check_constraint | audit_schema_name | audit_table_name 
--------------+-------------+----------+------------------------+-------------------------+------------+-------------------------+-------------------+------------------
 public       | rename_test | p        | s < e                  | end                     | int4range  | rename_test_p_check     |                   | 
(1 row)

ALTER TABLE rename_test RENAME "end" TO "embedded "" symbols";
TABLE sql_saga.era;
 table_schema | table_name  | era_name | valid_from_column_name | valid_until_column_name | range_type | bounds_check_constraint | audit_schema_name | audit_table_name 
--------------+-------------+----------+------------------------+-------------------------+------------+-------------------------+-------------------+------------------
 public       | rename_test | p        | s < e                  | embedded " symbols      | int4range  | rename_test_p_check     |                   | 
(1 row)

ALTER TABLE rename_test RENAME CONSTRAINT rename_test_p_check TO start_before_end;
TABLE sql_saga.era;
 table_schema | table_name  | era_name | valid_from_column_name | valid_until_column_name | range_type | bounds_check_constraint | audit_schema_name | audit_table_name 
--------------+-------------+----------+------------------------+-------------------------+------------+-------------------------+-------------------+------------------
 public       | rename_test | p        | s < e                  | embedded " symbols      | int4range  | start_before_end        |                   | 
(1 row)

/* api */
ALTER TABLE rename_test ADD COLUMN id integer PRIMARY KEY;
SELECT sql_saga.add_updatable_views('rename_test', 'p');
 add_updatable_views 
---------------------
 t
(1 row)

TABLE sql_saga.api_view;
 table_schema | table_name  | era_name | view_schema_name |        view_table_name        |   trigger_name   
--------------+-------------+----------+------------------+-------------------------------+------------------
 public       | rename_test | p        | public           | rename_test__for_portion_of_p | for_portion_of_p
(1 row)

ALTER TRIGGER for_portion_of_p ON rename_test__for_portion_of_p RENAME TO portion_trigger;
TABLE sql_saga.api_view;
 table_schema | table_name  | era_name | view_schema_name |        view_table_name        |  trigger_name   
--------------+-------------+----------+------------------+-------------------------------+-----------------
 public       | rename_test | p        | public           | rename_test__for_portion_of_p | portion_trigger
(1 row)

SELECT sql_saga.drop_updatable_views('rename_test', 'p');
 drop_updatable_views 
----------------------
 t
(1 row)

ALTER TABLE rename_test DROP COLUMN id;
/* unique_keys */
SELECT sql_saga.add_unique_key('rename_test', ARRAY['col2', 'col1', 'col3'], 'p');
        add_unique_key        
------------------------------
 rename_test_col2_col1_col3_p
(1 row)

TABLE sql_saga.unique_keys;
       unique_key_name        | table_schema | table_name  |   column_names   | era_name |                    unique_constraint                    |        exclude_constraint         | predicate 
------------------------------+--------------+-------------+------------------+----------+---------------------------------------------------------+-----------------------------------+-----------
 rename_test_col2_col1_col3_p | public       | rename_test | {col2,col1,col3} | p        | rename_test_col2_col1_col3_s < e_embedded " symbols_key | rename_test_col2_col1_col3_p_excl | 
(1 row)

ALTER TABLE rename_test RENAME COLUMN col1 TO "COLUMN1";
ALTER TABLE rename_test RENAME CONSTRAINT "rename_test_col2_col1_col3_s < e_embedded "" symbols_key" TO unconst;
ALTER TABLE rename_test RENAME CONSTRAINT rename_test_col2_col1_col3_p_excl TO exconst;
TABLE sql_saga.unique_keys;
       unique_key_name        | table_schema | table_name  |    column_names     | era_name | unique_constraint | exclude_constraint | predicate 
------------------------------+--------------+-------------+---------------------+----------+-------------------+--------------------+-----------
 rename_test_col2_col1_col3_p | public       | rename_test | {col2,COLUMN1,col3} | p        | unconst           | exconst            | 
(1 row)

/* foreign_keys */
CREATE TABLE rename_test_ref (LIKE rename_test);
SELECT sql_saga.add_era('rename_test_ref', 's < e', 'embedded " symbols', 'q');
 add_era 
---------
 t
(1 row)

TABLE sql_saga.era;
 table_schema |   table_name    | era_name | valid_from_column_name | valid_until_column_name | range_type | bounds_check_constraint | audit_schema_name | audit_table_name 
--------------+-----------------+----------+------------------------+-------------------------+------------+-------------------------+-------------------+------------------
 public       | rename_test     | p        | s < e                  | embedded " symbols      | int4range  | start_before_end        |                   | 
 public       | rename_test_ref | q        | s < e                  | embedded " symbols      | int4range  | rename_test_ref_q_check |                   | 
(2 rows)

SELECT sql_saga.add_foreign_key('rename_test_ref', ARRAY['col2', 'COLUMN1', 'col3'], 'q', 'rename_test_col2_col1_col3_p');
           add_foreign_key           
-------------------------------------
 rename_test_ref_col2_COLUMN1_col3_q
(1 row)

TABLE sql_saga.foreign_keys;
          foreign_key_name           |         type         | table_schema |   table_name    |    column_names     | fk_era_name |             fk_table_columns_snapshot             |       unique_key_name        | match_type | update_action | delete_action |               fk_insert_trigger               |               fk_update_trigger               | fk_check_constraint | fk_helper_function |               uk_update_trigger               |               uk_delete_trigger               
-------------------------------------+----------------------+--------------+-----------------+---------------------+-------------+---------------------------------------------------+------------------------------+------------+---------------+---------------+-----------------------------------------------+-----------------------------------------------+---------------------+--------------------+-----------------------------------------------+-----------------------------------------------
 rename_test_ref_col2_COLUMN1_col3_q | temporal_to_temporal | public       | rename_test_ref | {col2,COLUMN1,col3} | q           | {COLUMN1,col2,col3,"s < e","embedded \" symbols"} | rename_test_col2_col1_col3_p | SIMPLE     | NO ACTION     | NO ACTION     | rename_test_ref_col2_COLUMN1_col3_q_fk_insert | rename_test_ref_col2_COLUMN1_col3_q_fk_update |                     |                    | rename_test_ref_col2_COLUMN1_col3_q_uk_update | rename_test_ref_col2_COLUMN1_col3_q_uk_delete
(1 row)

SAVEPOINT pristine;
ALTER TABLE rename_test_ref RENAME COLUMN "COLUMN1" TO col1;
TABLE sql_saga.foreign_keys; -- The column name should be updated here
         foreign_key_name         |         type         | table_schema |   table_name    |   column_names   | fk_era_name |           fk_table_columns_snapshot            |       unique_key_name        | match_type | update_action | delete_action |             fk_insert_trigger              |             fk_update_trigger              | fk_check_constraint | fk_helper_function |             uk_update_trigger              |             uk_delete_trigger              
----------------------------------+----------------------+--------------+-----------------+------------------+-------------+------------------------------------------------+------------------------------+------------+---------------+---------------+--------------------------------------------+--------------------------------------------+---------------------+--------------------+--------------------------------------------+--------------------------------------------
 rename_test_ref_col2_col1_col3_q | temporal_to_temporal | public       | rename_test_ref | {col2,col1,col3} | q           | {col1,col2,col3,"s < e","embedded \" symbols"} | rename_test_col2_col1_col3_p | SIMPLE     | NO ACTION     | NO ACTION     | rename_test_ref_col2_col1_col3_q_fk_insert | rename_test_ref_col2_col1_col3_q_fk_update |                     |                    | rename_test_ref_col2_col1_col3_q_uk_update | rename_test_ref_col2_col1_col3_q_uk_delete
(1 row)

ROLLBACK TO SAVEPOINT pristine;
ALTER TRIGGER "rename_test_ref_col2_COLUMN1_col3_q_fk_insert" ON rename_test_ref RENAME TO fk_insert;
ERROR:  cannot drop or rename trigger "rename_test_ref_col2_COLUMN1_col3_q_fk_insert" on table "rename_test_ref" because it is used in an era foreign key "rename_test_ref_col2_COLUMN1_col3_q"
CONTEXT:  PL/pgSQL function rename_following() line 397 at RAISE
ROLLBACK TO SAVEPOINT pristine;
ALTER TRIGGER "rename_test_ref_col2_COLUMN1_col3_q_fk_update" ON rename_test_ref RENAME TO fk_update;
ERROR:  cannot drop or rename trigger "rename_test_ref_col2_COLUMN1_col3_q_fk_update" on table "rename_test_ref" because it is used in an era foreign key "rename_test_ref_col2_COLUMN1_col3_q"
CONTEXT:  PL/pgSQL function rename_following() line 397 at RAISE
ROLLBACK TO SAVEPOINT pristine;
ALTER TRIGGER "rename_test_ref_col2_COLUMN1_col3_q_uk_update" ON rename_test RENAME TO uk_update;
ERROR:  cannot drop or rename trigger "rename_test_ref_col2_COLUMN1_col3_q_uk_update" on table "rename_test" because it is used in an era foreign key "rename_test_ref_col2_COLUMN1_col3_q"
CONTEXT:  PL/pgSQL function rename_following() line 397 at RAISE
ROLLBACK TO SAVEPOINT pristine;
ALTER TRIGGER "rename_test_ref_col2_COLUMN1_col3_q_uk_delete" ON rename_test RENAME TO uk_delete;
ERROR:  cannot drop or rename trigger "rename_test_ref_col2_COLUMN1_col3_q_uk_delete" on table "rename_test" because it is used in an era foreign key "rename_test_ref_col2_COLUMN1_col3_q"
CONTEXT:  PL/pgSQL function rename_following() line 397 at RAISE
ROLLBACK TO SAVEPOINT pristine;
TABLE sql_saga.foreign_keys;
          foreign_key_name           |         type         | table_schema |   table_name    |    column_names     | fk_era_name |             fk_table_columns_snapshot             |       unique_key_name        | match_type | update_action | delete_action |               fk_insert_trigger               |               fk_update_trigger               | fk_check_constraint | fk_helper_function |               uk_update_trigger               |               uk_delete_trigger               
-------------------------------------+----------------------+--------------+-----------------+---------------------+-------------+---------------------------------------------------+------------------------------+------------+---------------+---------------+-----------------------------------------------+-----------------------------------------------+---------------------+--------------------+-----------------------------------------------+-----------------------------------------------
 rename_test_ref_col2_COLUMN1_col3_q | temporal_to_temporal | public       | rename_test_ref | {col2,COLUMN1,col3} | q           | {COLUMN1,col2,col3,"s < e","embedded \" symbols"} | rename_test_col2_col1_col3_p | SIMPLE     | NO ACTION     | NO ACTION     | rename_test_ref_col2_COLUMN1_col3_q_fk_insert | rename_test_ref_col2_COLUMN1_col3_q_fk_update |                     |                    | rename_test_ref_col2_COLUMN1_col3_q_uk_update | rename_test_ref_col2_COLUMN1_col3_q_uk_delete
(1 row)

SELECT sql_saga.drop_foreign_key('rename_test_ref', ARRAY['col2', 'COLUMN1', 'col3'], 'q');
 drop_foreign_key 
------------------
 
(1 row)

SELECT sql_saga.drop_unique_key('rename_test', ARRAY['col2', 'COLUMN1', 'col3'], 'p');
 drop_unique_key 
-----------------
 
(1 row)

SELECT sql_saga.drop_era('rename_test', 'p');
 drop_era 
----------
 t
(1 row)

DROP TABLE rename_test;
SELECT sql_saga.drop_era('rename_test_ref','q');
 drop_era 
----------
 t
(1 row)

DROP TABLE rename_test_ref;
ROLLBACK;
\i sql/include/test_teardown.sql
--
-- test_teardown.sql
--
-- Common teardown for regression tests. This script drops the unprivileged
-- user role created by test_setup.sql.
--
-- It is important to reset the role first, in case a test fails and
-- leaves the session role set to the user that is about to be dropped.
RESET ROLE;
-- Drop the extensions to ensure a clean state for the next test.
-- Use CASCADE to remove any dependent objects created by sql_saga.
DROP EXTENSION IF EXISTS sql_saga CASCADE;
DROP EXTENSION IF EXISTS btree_gist CASCADE;
-- Revoke any privileges held by the test user and drop any objects they own.
-- This is necessary before the role can be dropped.
DROP OWNED BY sql_saga_unprivileged_user;
DROP ROLE IF EXISTS sql_saga_unprivileged_user;
