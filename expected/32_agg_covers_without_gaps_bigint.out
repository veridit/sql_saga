\i sql/include/test_setup.sql
--
-- test_setup.sql
--
-- Common setup for regression tests that need to be self-contained.
-- This script creates the extension, a user role, and grants permissions.
--
SET datestyle = 'ISO, YMD';
CREATE EXTENSION IF NOT EXISTS btree_gist;
CREATE EXTENSION IF NOT EXISTS sql_saga CASCADE;
DO $$
BEGIN
    CREATE ROLE sql_saga_unprivileged_user;
EXCEPTION WHEN duplicate_object THEN
END
$$;
GRANT USAGE ON SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT SELECT ON ALL TABLES IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
/*
 * Allow the unprivileged user to create tables in the public schema.
 * This is required for tests that create their own tables.
 * PG 15+ restricts this by default.
 */
GRANT CREATE ON SCHEMA public TO PUBLIC;
BEGIN;
SET ROLE TO sql_saga_unprivileged_user;
-- First, create the integer shifts table
CREATE TABLE bigint_shifts (
  job_id INTEGER,
  worker_id INTEGER,
  valid_from BIGINT,
  valid_until BIGINT
);
-- Add era and unique key via sql_saga
SELECT sql_saga.add_era('bigint_shifts', 'valid_from', 'valid_until');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key('bigint_shifts', ARRAY['job_id', 'worker_id']);
            add_unique_key            
--------------------------------------
 bigint_shifts_job_id_worker_id_valid
(1 row)

TABLE sql_saga.era;
 table_schema |  table_name   | era_name | valid_from_column_name | valid_until_column_name | range_type | range_subtype | range_subtype_category |  bounds_check_constraint  | synchronize_valid_to_column | synchronize_range_column | trigger_applies_defaults | audit_schema_name | audit_table_name 
--------------+---------------+----------+------------------------+-------------------------+------------+---------------+------------------------+---------------------------+-----------------------------+--------------------------+--------------------------+-------------------+------------------
 public       | bigint_shifts | valid    | valid_from             | valid_until             | int8range  | bigint        | N                      | bigint_shifts_valid_check |                             |                          | f                        |                   | 
(1 row)

TABLE sql_saga.unique_keys;
           unique_key_name            | table_schema |  table_name   | key_type |    column_names    | era_name |             unique_constraint             |            exclude_constraint             | predicate 
--------------------------------------+--------------+---------------+----------+--------------------+----------+-------------------------------------------+-------------------------------------------+-----------
 bigint_shifts_job_id_worker_id_valid | public       | bigint_shifts | natural  | {job_id,worker_id} | valid    | bigint_shifts_job_id_worker_id_valid_uniq | bigint_shifts_job_id_worker_id_valid_excl | 
(1 row)

INSERT INTO bigint_shifts(job_id, worker_id, valid_from, valid_until) VALUES
-- Insert test data into the integer shifts table
  (1, 1, 1000000000, 6000000001),
  (1, 2, 6000000001, 12000000001); 
-- This test checks for an exact match with one range
-- Expected: TRUE
SELECT sql_saga.covers_without_gaps(int8range(valid_from, valid_until), int8range(1000000000, 6000000001) ORDER BY valid_from)
FROM bigint_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 t
(1 row)

-- This test checks for an exact match with two consecutive ranges
-- Expected: TRUE
SELECT sql_saga.covers_without_gaps(int8range(valid_from, valid_until), int8range(1000000000, 12000000001) ORDER BY valid_from)
FROM bigint_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 t
(1 row)

-- Test 3: Range with Extra at the Beginning
-- Expected: TRUE
SELECT sql_saga.covers_without_gaps(int8range(valid_from, valid_until), int8range(2000000000, 6000000001) ORDER BY valid_from)
FROM bigint_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 t
(1 row)

-- Test 4: Range with Extra at the End
-- Expected: TRUE
SELECT sql_saga.covers_without_gaps(int8range(valid_from, valid_until), int8range(1000000000, 11000000001) ORDER BY valid_from)
FROM bigint_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 t
(1 row)

-- Test 5: Range with Extra on Both Sides
-- Expected: TRUE
SELECT sql_saga.covers_without_gaps(int8range(valid_from, valid_until), int8range(2000000000, 11000000001) ORDER BY valid_from)
FROM bigint_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 t
(1 row)

-- Test 6: Range that Misses Completely
-- Expected: FALSE
SELECT sql_saga.covers_without_gaps(int8range(valid_from, valid_until), int8range(20000000000, 25000000001) ORDER BY valid_from)
FROM bigint_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 f
(1 row)

-- Test 7: Range with Uncovered Time at the Beginning
-- Expected: FALSE
SELECT sql_saga.covers_without_gaps(int8range(valid_from, valid_until), int8range(1, 12000000001) ORDER BY valid_from)
FROM bigint_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 f
(1 row)

-- Test 8: Range with Uncovered Time at the End
-- Expected: FALSE
SELECT sql_saga.covers_without_gaps(int8range(valid_from, valid_until), int8range(1000000000, 15000000001) ORDER BY valid_from)
FROM bigint_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 f
(1 row)

SELECT sql_saga.drop_unique_key('bigint_shifts', ARRAY['job_id', 'worker_id'], 'valid');
 drop_unique_key 
-----------------
 
(1 row)

SELECT sql_saga.drop_era('bigint_shifts');
 drop_era 
----------
 t
(1 row)

DROP TABLE bigint_shifts;
ROLLBACK;
\i sql/include/test_teardown.sql
--
-- test_teardown.sql
--
-- Common teardown for regression tests. This script drops the unprivileged
-- user role created by test_setup.sql.
--
-- It is important to reset the role first, in case a test fails and
-- leaves the session role set to the user that is about to be dropped.
RESET ROLE;
-- Drop the extensions to ensure a clean state for the next test.
-- Use CASCADE to remove any dependent objects created by sql_saga.
DROP EXTENSION IF EXISTS sql_saga CASCADE;
DROP EXTENSION IF EXISTS btree_gist CASCADE;
-- Revoke any privileges held by the test user and drop any objects they own.
-- This is necessary before the role can be dropped.
DROP OWNED BY sql_saga_unprivileged_user;
DROP ROLE IF EXISTS sql_saga_unprivileged_user;
