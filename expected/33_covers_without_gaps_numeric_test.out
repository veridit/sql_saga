-- First, create the integer shifts table
CREATE TABLE numeric_shifts (
  job_id INTEGER,
  worker_id INTEGER,
  valid_from NUMERIC,
  valid_until NUMERIC
);
-- Add era and unique key via sql_saga
SELECT sql_saga.add_era('numeric_shifts', 'valid_from', 'valid_until');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key('numeric_shifts', ARRAY['job_id', 'worker_id']);
            add_unique_key             
---------------------------------------
 numeric_shifts_job_id_worker_id_valid
(1 row)

TABLE sql_saga.era;
 table_schema |   table_name   | era_name | valid_from_column_name | valid_until_column_name | range_type |  bounds_check_constraint   | audit_table_oid 
--------------+----------------+----------+------------------------+-------------------------+------------+----------------------------+-----------------
 public       | numeric_shifts | valid    | valid_from             | valid_until             | numrange   | numeric_shifts_valid_check | 
(1 row)

TABLE sql_saga.unique_keys;
            unique_key_name            | table_schema |   table_name   |    column_names    | era_name |                     unique_constraint                      |              exclude_constraint               
---------------------------------------+--------------+----------------+--------------------+----------+------------------------------------------------------------+-----------------------------------------------
 numeric_shifts_job_id_worker_id_valid | public       | numeric_shifts | {job_id,worker_id} | valid    | numeric_shifts_job_id_worker_id_valid_from_valid_until_key | numeric_shifts_job_id_worker_id_numrange_excl
(1 row)

-- Insert test data into the integer shifts table
INSERT INTO numeric_shifts(job_id, worker_id, valid_from, valid_until) VALUES
  (1, 1, 1.5, 6.5),
  (1, 2, 6.5, 12.5); 
TABLE numeric_shifts;
 job_id | worker_id | valid_from | valid_until 
--------+-----------+------------+-------------
      1 |         1 |        1.5 |         6.5
      1 |         2 |        6.5 |        12.5
(2 rows)

-- This test checks for an exact match with one range
-- Expected: TRUE
SELECT sql_saga.covers_without_gaps(numrange(valid_from, valid_until), numrange(1.5, 6.5) ORDER BY valid_from)
FROM numeric_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 t
(1 row)

-- This test checks for an exact match with two consecutive ranges
-- Expected: TRUE
SELECT sql_saga.covers_without_gaps(numrange(valid_from, valid_until), numrange(1.5, 12.5) ORDER BY valid_from)
FROM numeric_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 t
(1 row)

-- Test 3: Range with Extra at the Beginning
-- Expected: TRUE
SELECT sql_saga.covers_without_gaps(numrange(valid_from, valid_until), numrange(2.5, 6.5) ORDER BY valid_from)
FROM numeric_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 t
(1 row)

-- Test 4: Range with Extra at the End
-- Expected: TRUE
SELECT sql_saga.covers_without_gaps(numrange(valid_from, valid_until), numrange(1.5, 11.5) ORDER BY valid_from)
FROM numeric_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 t
(1 row)

-- Test 5: Range with Extra on Both Sides
-- Expected: TRUE
SELECT sql_saga.covers_without_gaps(numrange(valid_from, valid_until), numrange(2.5, 11.5) ORDER BY valid_from)
FROM numeric_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 t
(1 row)

-- Test 6: Range that Misses Completely
-- Expected: FALSE
SELECT sql_saga.covers_without_gaps(numrange(valid_from, valid_until), numrange(20.5, 25.5) ORDER BY valid_from)
FROM numeric_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 f
(1 row)

-- Test 7: Range with Uncovered Time at the Beginning
-- Expected: FALSE
SELECT sql_saga.covers_without_gaps(numrange(valid_from, valid_until), numrange(0.0, 12.0) ORDER BY valid_from)
FROM numeric_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 f
(1 row)

-- Test 8: Range with Uncovered Time at the End
-- Expected: FALSE
SELECT sql_saga.covers_without_gaps(numrange(valid_from, valid_until), numrange(1.5, 15.5) ORDER BY valid_from)
FROM numeric_shifts
WHERE job_id = 1;
 covers_without_gaps 
---------------------
 f
(1 row)

SET client_min_messages TO NOTICE;
SELECT sql_saga.drop_unique_key('numeric_shifts', 'numeric_shifts_job_id_worker_id_valid');
 drop_unique_key 
-----------------
 
(1 row)

SELECT sql_saga.drop_era('numeric_shifts');
 drop_era 
----------
 t
(1 row)

DROP TABLE numeric_shifts;
