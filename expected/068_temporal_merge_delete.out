\i sql/include/test_setup.sql
--
-- test_setup.sql
--
-- Common setup for regression tests that need to be self-contained.
-- This script creates the extension, a user role, and grants permissions.
--
SET datestyle = 'ISO, YMD';
CREATE EXTENSION IF NOT EXISTS btree_gist;
CREATE EXTENSION IF NOT EXISTS sql_saga CASCADE;
DO $$
BEGIN
    CREATE ROLE sql_saga_unprivileged_user;
EXCEPTION WHEN duplicate_object THEN
END
$$;
GRANT USAGE ON SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT SELECT ON ALL TABLES IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
/*
 * Allow the unprivileged user to create tables in the public schema.
 * This is required for tests that create their own tables.
 * PG 15+ restricts this by default.
 */
GRANT CREATE ON SCHEMA public TO PUBLIC;
BEGIN;
\echo '----------------------------------------------------------------------------'
----------------------------------------------------------------------------
\echo 'Test Suite: `sql_saga.temporal_merge` Deletion Semantics'
Test Suite: `sql_saga.temporal_merge` Deletion Semantics
\echo 'Description:'
Description:
\echo '  This test suite verifies the behavior of the `delete_mode` parameter,'
  This test suite verifies the behavior of the `delete_mode` parameter,
\echo '  using a rich target timeline to test interactions with gaps and adjacencies.'
  using a rich target timeline to test interactions with gaps and adjacencies.
\echo '----------------------------------------------------------------------------'
----------------------------------------------------------------------------
SET client_min_messages TO NOTICE;
CREATE SCHEMA tmd; -- Temporal Merge Delete
-- Target table for all scenarios
CREATE TABLE tmd.target (id int, value text, edit_comment text, valid_from date, valid_until date);
SELECT sql_saga.add_era('tmd.target', 'valid_from', 'valid_until');
 add_era 
---------
 t
(1 row)

-- Helper to reset state to a rich timeline
CREATE PROCEDURE tmd.reset_target() LANGUAGE plpgsql AS $$
BEGIN
    TRUNCATE tmd.target;
    INSERT INTO tmd.target VALUES
        -- Entity 1 has adjacent slices and a gap
        (1, 'A1', 'Slice 1',           '2024-01-01', '2024-02-01'),
        (1, 'A2', 'Slice 2 (Adjacent)','2024-02-01', '2024-03-01'),
        (1, 'A3', 'Slice 3 (After Gap)','2024-04-01', '2024-05-01'),
        -- Entity 2 is a simple, long-lived entity
        (2, 'B',  'Long-lived',        '2023-01-01', '2026-01-01');
END;
$$;
--------------------------------------------------------------------------------
\echo 'Scenario 1: `DELETE_MISSING_TIMELINE`'
Scenario 1: `DELETE_MISSING_TIMELINE`
\echo 'Use Case: For an entity in the source, any part of its timeline NOT covered by the source is deleted.'
Use Case: For an entity in the source, any part of its timeline NOT covered by the source is deleted.
--------------------------------------------------------------------------------
SAVEPOINT s1;
CALL tmd.reset_target();
CREATE TEMP TABLE source_1 (row_id int, id int, value text, edit_comment text, valid_from date, valid_until date) ON COMMIT DROP;
-- Source covers only part of entity 1's history (Slice 2 and the gap).
-- The start (Slice 1) and end (Slice 3) should be deleted.
INSERT INTO source_1 VALUES (101, 1, 'A2-updated', 'Update S2 and bridge gap', '2024-02-01', '2024-04-01');
\echo '--- Target: Initial State ---'
--- Target: Initial State ---
TABLE tmd.target ORDER BY id, valid_from;
 id | value |    edit_comment     | valid_from | valid_until 
----+-------+---------------------+------------+-------------
  1 | A1    | Slice 1             | 2024-01-01 | 2024-02-01
  1 | A2    | Slice 2 (Adjacent)  | 2024-02-01 | 2024-03-01
  1 | A3    | Slice 3 (After Gap) | 2024-04-01 | 2024-05-01
  2 | B     | Long-lived          | 2023-01-01 | 2026-01-01
(4 rows)

\echo '--- Source: Data to merge ---'
--- Source: Data to merge ---
TABLE source_1 ORDER BY row_id;
 row_id | id |   value    |       edit_comment       | valid_from | valid_until 
--------+----+------------+--------------------------+------------+-------------
    101 |  1 | A2-updated | Update S2 and bridge gap | 2024-02-01 | 2024-04-01
(1 row)

CALL sql_saga.temporal_merge(
    target_table      => 'tmd.target'::regclass,
    source_table      => 'source_1'::regclass,
    primary_identity_columns        => '{id}'::text[],
    ephemeral_columns => '{edit_comment}'::text[],
    mode              => 'MERGE_ENTITY_REPLACE',
    delete_mode       => 'DELETE_MISSING_TIMELINE',
    era_name          => 'valid'
);
\echo '--- Planner: Actual Plan ---'
--- Planner: Actual Plan ---
TABLE pg_temp.temporal_merge_plan ORDER BY plan_op_seq;
 plan_op_seq | row_ids | operation | update_effect | causal_id | is_new_entity | entity_keys | identity_keys | lookup_keys | s_t_relation | b_a_relation | old_valid_from | old_valid_until | new_valid_from | new_valid_until |                                data                                 | feedback | trace |     entity_key     
-------------+---------+-----------+---------------+-----------+---------------+-------------+---------------+-------------+--------------+--------------+----------------+-----------------+----------------+-----------------+---------------------------------------------------------------------+----------+-------+--------------------
           1 | {101}   | UPDATE    | GROW          | 101       | f             | {"id": 1}   | {"id": 1}     | {}          | started_by   | starts       | 2024-02-01     | 2024-03-01      | 2024-02-01     | 2024-04-01      | {"value": "A2-updated", "edit_comment": "Update S2 and bridge gap"} |          |       | existing_entity__1
           2 |         | DELETE    |               |           | f             | {"id": 1}   | {"id": 1}     | {}          |              |              | 2024-01-01     | 2024-02-01      |                |                 |                                                                     |          |       | 
           3 |         | DELETE    |               |           | f             | {"id": 1}   | {"id": 1}     | {}          |              |              | 2024-04-01     | 2024-05-01      |                |                 |                                                                     |          |       | 
(3 rows)

\echo '--- Executor: Actual Feedback ---'
--- Executor: Actual Feedback ---
TABLE pg_temp.temporal_merge_feedback ORDER BY source_row_id;
 source_row_id | target_entity_keys | status  | error_message 
---------------+--------------------+---------+---------------
           101 | [{"id": 1}]        | APPLIED | 
(1 row)

\echo '--- Target: Expected Final State ---'
--- Target: Expected Final State ---
SELECT * FROM (VALUES
    -- Entity 1's timeline is now only the part specified in the source.
    (1, 'A2-updated', 'Update S2 and bridge gap', '2024-02-01'::date, '2024-04-01'::date),
    -- Entity 2 is untouched because it was not in the source.
    (2, 'B', 'Long-lived', '2023-01-01'::date, '2026-01-01'::date)
) t(id, value, edit_comment, valid_from, valid_until) ORDER BY id, valid_from;
 id |   value    |       edit_comment       | valid_from | valid_until 
----+------------+--------------------------+------------+-------------
  1 | A2-updated | Update S2 and bridge gap | 2024-02-01 | 2024-04-01
  2 | B          | Long-lived               | 2023-01-01 | 2026-01-01
(2 rows)

\echo '--- Target: Final State ---'
--- Target: Final State ---
TABLE tmd.target ORDER BY id, valid_from;
 id |   value    |       edit_comment       | valid_from | valid_until 
----+------------+--------------------------+------------+-------------
  1 | A2-updated | Update S2 and bridge gap | 2024-02-01 | 2024-04-01
  2 | B          | Long-lived               | 2023-01-01 | 2026-01-01
(2 rows)

ROLLBACK TO SAVEPOINT s1;
--------------------------------------------------------------------------------
\echo 'Scenario 2: `DELETE_MISSING_ENTITIES`'
Scenario 2: `DELETE_MISSING_ENTITIES`
\echo 'Use Case: Any entity in the target that is NOT present in the source is completely deleted.'
Use Case: Any entity in the target that is NOT present in the source is completely deleted.
--------------------------------------------------------------------------------
SAVEPOINT s2;
CALL tmd.reset_target();
CREATE TEMP TABLE source_2 (row_id int, id int, value text, edit_comment text, valid_from date, valid_until date) ON COMMIT DROP;
-- Source only contains entity 1, so entity 2 should be deleted.
-- The source patches entity 1, but its timeline outside this patch should be preserved.
INSERT INTO source_2 VALUES (201, 1, 'A2-patch', 'Patch S2', '2024-02-10', '2024-02-20');
\echo '--- Target: Initial State ---'
--- Target: Initial State ---
TABLE tmd.target ORDER BY id, valid_from;
 id | value |    edit_comment     | valid_from | valid_until 
----+-------+---------------------+------------+-------------
  1 | A1    | Slice 1             | 2024-01-01 | 2024-02-01
  1 | A2    | Slice 2 (Adjacent)  | 2024-02-01 | 2024-03-01
  1 | A3    | Slice 3 (After Gap) | 2024-04-01 | 2024-05-01
  2 | B     | Long-lived          | 2023-01-01 | 2026-01-01
(4 rows)

\echo '--- Source: Data to merge ---'
--- Source: Data to merge ---
TABLE source_2 ORDER BY row_id;
 row_id | id |  value   | edit_comment | valid_from | valid_until 
--------+----+----------+--------------+------------+-------------
    201 |  1 | A2-patch | Patch S2     | 2024-02-10 | 2024-02-20
(1 row)

CALL sql_saga.temporal_merge(
    target_table      => 'tmd.target'::regclass,
    source_table      => 'source_2'::regclass,
    primary_identity_columns        => '{id}'::text[],
    ephemeral_columns => '{edit_comment}'::text[],
    mode              => 'MERGE_ENTITY_REPLACE',
    delete_mode       => 'DELETE_MISSING_ENTITIES',
    era_name          => 'valid'
);
\echo '--- Planner: Actual Plan ---'
--- Planner: Actual Plan ---
TABLE pg_temp.temporal_merge_plan ORDER BY plan_op_seq;
 plan_op_seq | row_ids | operation | update_effect | causal_id | is_new_entity | entity_keys | identity_keys | lookup_keys | s_t_relation | b_a_relation | old_valid_from | old_valid_until | new_valid_from | new_valid_until |                         data                          | feedback | trace |     entity_key     
-------------+---------+-----------+---------------+-----------+---------------+-------------+---------------+-------------+--------------+--------------+----------------+-----------------+----------------+-----------------+-------------------------------------------------------+----------+-------+--------------------
           1 | {201}   | INSERT    |               | 201       | f             | {"id": 1}   | {"id": 1}     | {}          | during       | contains     | 2024-02-01     | 2024-03-01      | 2024-02-10     | 2024-02-20      | {"value": "A2-patch", "edit_comment": "Patch S2"}     |          |       | existing_entity__1
           2 | {201}   | INSERT    |               | 201       | f             | {"id": 1}   | {"id": 1}     | {}          | during       | finished_by  | 2024-02-01     | 2024-03-01      | 2024-02-20     | 2024-03-01      | {"value": "A2", "edit_comment": "Slice 2 (Adjacent)"} |          |       | existing_entity__1
           3 | {201}   | UPDATE    | SHRINK        | 201       | f             | {"id": 1}   | {"id": 1}     | {}          | during       | started_by   | 2024-02-01     | 2024-03-01      | 2024-02-01     | 2024-02-10      | {"value": "A2", "edit_comment": "Slice 2 (Adjacent)"} |          |       | existing_entity__1
           4 |         | DELETE    |               |           | f             | {"id": 2}   | {"id": 2}     | {}          |              |              | 2023-01-01     | 2026-01-01      |                |                 |                                                       |          |       | 
(4 rows)

\echo '--- Executor: Actual Feedback ---'
--- Executor: Actual Feedback ---
TABLE pg_temp.temporal_merge_feedback ORDER BY source_row_id;
 source_row_id | target_entity_keys | status  | error_message 
---------------+--------------------+---------+---------------
           201 | [{"id": 1}]        | APPLIED | 
(1 row)

\echo '--- Target: Expected Final State ---'
--- Target: Expected Final State ---
SELECT * FROM (VALUES
    -- Entity 1's timeline is patched, but not truncated. Entity 2 is gone.
    (1, 'A1', 'Slice 1', '2024-01-01'::date, '2024-02-01'::date),
    (1, 'A2', 'Slice 2 (Adjacent)', '2024-02-01'::date, '2024-02-10'::date),
    (1, 'A2-patch', 'Patch S2', '2024-02-10'::date, '2024-02-20'::date),
    (1, 'A2', 'Slice 2 (Adjacent)', '2024-02-20'::date, '2024-03-01'::date),
    (1, 'A3', 'Slice 3 (After Gap)', '2024-04-01'::date, '2024-05-01'::date)
) t(id, value, edit_comment, valid_from, valid_until) ORDER BY id, valid_from;
 id |  value   |    edit_comment     | valid_from | valid_until 
----+----------+---------------------+------------+-------------
  1 | A1       | Slice 1             | 2024-01-01 | 2024-02-01
  1 | A2       | Slice 2 (Adjacent)  | 2024-02-01 | 2024-02-10
  1 | A2-patch | Patch S2            | 2024-02-10 | 2024-02-20
  1 | A2       | Slice 2 (Adjacent)  | 2024-02-20 | 2024-03-01
  1 | A3       | Slice 3 (After Gap) | 2024-04-01 | 2024-05-01
(5 rows)

\echo '--- Target: Final State ---'
--- Target: Final State ---
TABLE tmd.target ORDER BY id, valid_from;
 id |  value   |    edit_comment     | valid_from | valid_until 
----+----------+---------------------+------------+-------------
  1 | A1       | Slice 1             | 2024-01-01 | 2024-02-01
  1 | A2       | Slice 2 (Adjacent)  | 2024-02-01 | 2024-02-10
  1 | A2-patch | Patch S2            | 2024-02-10 | 2024-02-20
  1 | A2       | Slice 2 (Adjacent)  | 2024-02-20 | 2024-03-01
  1 | A3       | Slice 3 (After Gap) | 2024-04-01 | 2024-05-01
(5 rows)

ROLLBACK TO SAVEPOINT s2;
--------------------------------------------------------------------------------
\echo 'Scenario 3: `DELETE_MISSING_TIMELINE_AND_ENTITIES`'
Scenario 3: `DELETE_MISSING_TIMELINE_AND_ENTITIES`
\echo 'Use Case: A full "source-as-truth" sync. Timelines of source entities'
Use Case: A full "source-as-truth" sync. Timelines of source entities
\echo '             are replaced, and target entities not in source are deleted.'
             are replaced, and target entities not in source are deleted.
--------------------------------------------------------------------------------
SAVEPOINT s3;
CALL tmd.reset_target();
CREATE TEMP TABLE source_3 (row_id int, id int, value text, edit_comment text, valid_from date, valid_until date) ON COMMIT DROP;
-- Source only contains entity 1. Its timeline should be replaced, and entity 2 should be deleted.
INSERT INTO source_3 VALUES (301, 1, 'A2-updated', 'Update S2 and bridge gap', '2024-02-01', '2024-04-01');
\echo '--- Target: Initial State ---'
--- Target: Initial State ---
TABLE tmd.target ORDER BY id, valid_from;
 id | value |    edit_comment     | valid_from | valid_until 
----+-------+---------------------+------------+-------------
  1 | A1    | Slice 1             | 2024-01-01 | 2024-02-01
  1 | A2    | Slice 2 (Adjacent)  | 2024-02-01 | 2024-03-01
  1 | A3    | Slice 3 (After Gap) | 2024-04-01 | 2024-05-01
  2 | B     | Long-lived          | 2023-01-01 | 2026-01-01
(4 rows)

\echo '--- Source: Data to merge ---'
--- Source: Data to merge ---
TABLE source_3 ORDER BY row_id;
 row_id | id |   value    |       edit_comment       | valid_from | valid_until 
--------+----+------------+--------------------------+------------+-------------
    301 |  1 | A2-updated | Update S2 and bridge gap | 2024-02-01 | 2024-04-01
(1 row)

CALL sql_saga.temporal_merge(
    target_table      => 'tmd.target'::regclass,
    source_table      => 'source_3'::regclass,
    primary_identity_columns        => '{id}'::text[],
    ephemeral_columns => '{edit_comment}'::text[],
    mode              => 'MERGE_ENTITY_REPLACE',
    delete_mode       => 'DELETE_MISSING_TIMELINE_AND_ENTITIES',
    era_name          => 'valid'
);
\echo '--- Planner: Actual Plan ---'
--- Planner: Actual Plan ---
TABLE pg_temp.temporal_merge_plan ORDER BY plan_op_seq;
 plan_op_seq | row_ids | operation | update_effect | causal_id | is_new_entity | entity_keys | identity_keys | lookup_keys | s_t_relation | b_a_relation | old_valid_from | old_valid_until | new_valid_from | new_valid_until |                                data                                 | feedback | trace |     entity_key     
-------------+---------+-----------+---------------+-----------+---------------+-------------+---------------+-------------+--------------+--------------+----------------+-----------------+----------------+-----------------+---------------------------------------------------------------------+----------+-------+--------------------
           1 | {301}   | UPDATE    | GROW          | 301       | f             | {"id": 1}   | {"id": 1}     | {}          | started_by   | starts       | 2024-02-01     | 2024-03-01      | 2024-02-01     | 2024-04-01      | {"value": "A2-updated", "edit_comment": "Update S2 and bridge gap"} |          |       | existing_entity__1
           2 |         | DELETE    |               |           | f             | {"id": 1}   | {"id": 1}     | {}          |              |              | 2024-01-01     | 2024-02-01      |                |                 |                                                                     |          |       | 
           3 |         | DELETE    |               |           | f             | {"id": 1}   | {"id": 1}     | {}          |              |              | 2024-04-01     | 2024-05-01      |                |                 |                                                                     |          |       | 
           4 |         | DELETE    |               |           | f             | {"id": 2}   | {"id": 2}     | {}          |              |              | 2023-01-01     | 2026-01-01      |                |                 |                                                                     |          |       | 
(4 rows)

\echo '--- Executor: Actual Feedback ---'
--- Executor: Actual Feedback ---
TABLE pg_temp.temporal_merge_feedback ORDER BY source_row_id;
 source_row_id | target_entity_keys | status  | error_message 
---------------+--------------------+---------+---------------
           301 | [{"id": 1}]        | APPLIED | 
(1 row)

\echo '--- Target: Expected Final State ---'
--- Target: Expected Final State ---
SELECT * FROM (VALUES
    -- Entity 1's timeline is replaced, and Entity 2 is gone.
    (1, 'A2-updated', 'Update S2 and bridge gap', '2024-02-01'::date, '2024-04-01'::date)
) t(id, value, edit_comment, valid_from, valid_until) ORDER BY id, valid_from;
 id |   value    |       edit_comment       | valid_from | valid_until 
----+------------+--------------------------+------------+-------------
  1 | A2-updated | Update S2 and bridge gap | 2024-02-01 | 2024-04-01
(1 row)

\echo '--- Target: Final State ---'
--- Target: Final State ---
TABLE tmd.target ORDER BY id, valid_from;
 id |   value    |       edit_comment       | valid_from | valid_until 
----+------------+--------------------------+------------+-------------
  1 | A2-updated | Update S2 and bridge gap | 2024-02-01 | 2024-04-01
(1 row)

ROLLBACK TO SAVEPOINT s3;
ROLLBACK;
\i sql/include/test_teardown.sql
--
-- test_teardown.sql
--
-- Common teardown for regression tests. This script drops the unprivileged
-- user role created by test_setup.sql.
--
-- It is important to reset the role first, in case a test fails and
-- leaves the session role set to the user that is about to be dropped.
RESET ROLE;
-- Drop the extensions to ensure a clean state for the next test.
-- Use CASCADE to remove any dependent objects created by sql_saga.
DROP EXTENSION IF EXISTS sql_saga CASCADE;
DROP EXTENSION IF EXISTS btree_gist CASCADE;
-- Revoke any privileges held by the test user and drop any objects they own.
-- This is necessary before the role can be dropped.
DROP OWNED BY sql_saga_unprivileged_user;
DROP ROLE IF EXISTS sql_saga_unprivileged_user;
