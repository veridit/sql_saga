/* Run tests as unprivileged user */
SET ROLE TO sql_saga_unprivileged_user;
/* https://github.com/xocolatl/periods/issues/27 */
CREATE TABLE uk(id integer, f integer, u integer);
SELECT sql_saga.add_era('uk', 'f', 'u', 'p');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key('uk', ARRAY['id'], 'p');
 add_unique_key 
----------------
 uk_id_p
(1 row)

CREATE TABLE fk(id integer, uk_id integer, f integer, u integer);
SELECT sql_saga.add_era('fk', 'f', 'u', 'q');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key('fk', ARRAY['id'], 'q');
 add_unique_key 
----------------
 fk_id_q
(1 row)

SELECT sql_saga.add_foreign_key('fk', ARRAY['uk_id'], 'q', 'uk_id_p');
 add_foreign_key 
-----------------
 fk_uk_id_q
(1 row)

--
TABLE sql_saga.periods;
ERROR:  relation "sql_saga.periods" does not exist
LINE 1: TABLE sql_saga.periods;
              ^
TABLE sql_saga.foreign_keys;
 foreign_key_name | table_schema | table_name | column_names | era_name | unique_key_name | match_type | update_action | delete_action |  fk_insert_trigger   |  fk_update_trigger   |  uk_update_trigger   |  uk_delete_trigger   
------------------+--------------+------------+--------------+----------+-----------------+------------+---------------+---------------+----------------------+----------------------+----------------------+----------------------
 fk_uk_id_q       | public       | fk         | {uk_id}      | q        | uk_id_p         | SIMPLE     | NO ACTION     | NO ACTION     | fk_uk_id_q_fk_insert | fk_uk_id_q_fk_update | fk_uk_id_q_uk_update | fk_uk_id_q_uk_delete
(1 row)

--
INSERT INTO uk(id, f, u)        VALUES    (1, 1, 3),    (1, 3, 5);
INSERT INTO fk(id, uk_id, f, u) VALUES (1, 1, 1, 2), (2, 1, 2, 5);
-- Make sure the data is there before we start deleting
TABLE uk;
 id | f | u 
----+---+---
  1 | 1 | 3
  1 | 3 | 5
(2 rows)

TABLE fk;
 id | uk_id | f | u 
----+-------+---+---
  1 |     1 | 1 | 2
  2 |     1 | 2 | 5
(2 rows)

--expected: fail
DELETE FROM uk WHERE (id, f, u) = (1, 1, 3);
ERROR:  update or delete on table "public.uk" violates foreign key constraint "fk_uk_id_q" on table "public.fk"
TABLE uk;
 id | f | u 
----+---+---
  1 | 1 | 3
  1 | 3 | 5
(2 rows)

TABLE fk;
 id | uk_id | f | u 
----+-------+---+---
  1 |     1 | 1 | 2
  2 |     1 | 2 | 5
(2 rows)

--expected: fail
DELETE FROM uk WHERE (id, f, u) = (1, 3, 5);
ERROR:  update or delete on table "public.uk" violates foreign key constraint "fk_uk_id_q" on table "public.fk"
INSERT INTO uk(id, f, u)        VALUES    (2, 1, 5);
INSERT INTO fk(id, uk_id, f, u) VALUES (4, 2, 2, 4);
TABLE uk;
 id | f | u 
----+---+---
  1 | 1 | 3
  1 | 3 | 5
  2 | 1 | 5
(3 rows)

TABLE fk;
 id | uk_id | f | u 
----+-------+---+---
  1 |     1 | 1 | 2
  2 |     1 | 2 | 5
  4 |     2 | 2 | 4
(3 rows)

--expected: fail
UPDATE uk SET u = 3 WHERE (id, f, u) = (2, 1, 5);
ERROR:  update or delete on table "public.uk" violates foreign key constraint "fk_uk_id_q" on table "public.fk"
TABLE uk;
 id | f | u 
----+---+---
  1 | 1 | 3
  1 | 3 | 5
  2 | 1 | 5
(3 rows)

TABLE fk;
 id | uk_id | f | u 
----+-------+---+---
  1 |     1 | 1 | 2
  2 |     1 | 2 | 5
  4 |     2 | 2 | 4
(3 rows)

-- Create non contiguous time
INSERT INTO uk(id, f, u)        VALUES    (3, 1, 3),
                                          (3, 4, 5);
-- Reference over non contiguous time - should fail
INSERT INTO fk(id, uk_id, f, u) VALUES (5, 3, 1, 5);
ERROR:  insert or update on table "public.fk" violates foreign key constraint "fk_uk_id_q"
-- Create overlappig range - should fail
INSERT INTO uk(id, f, u)        VALUES    (4, 1, 4),
                                          (4, 3, 5);
ERROR:  conflicting key value violates exclusion constraint "uk_id_int4range_excl"
DETAIL:  Key (id, int4range(f, u))=(4, [3,5)) conflicts with existing key (id, int4range(f, u))=(4, [1,4)).
DROP TABLE uk;
DROP TABLE fk;
-- Test case for bug with infinite parent validity
CREATE TABLE legal_unit_bug (
    id INT NOT NULL,
    valid_from DATE NOT NULL,
    valid_until DATE NOT NULL,
    name TEXT,
    PRIMARY KEY (id, valid_from)
);
SELECT sql_saga.add_era('legal_unit_bug', 'valid_from', 'valid_until');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key('legal_unit_bug', ARRAY['id']);
     add_unique_key      
-------------------------
 legal_unit_bug_id_valid
(1 row)

CREATE TABLE establishment_bug (
    id INT NOT NULL,
    legal_unit_id INT, -- Temporal FK
    valid_from DATE NOT NULL,
    valid_until DATE NOT NULL,
    name TEXT,
    PRIMARY KEY (id, valid_from)
);
SELECT sql_saga.add_era('establishment_bug', 'valid_from', 'valid_until');
 add_era 
---------
 t
(1 row)

-- Note: A unique key on 'id' is not strictly necessary for this test but good practice.
SELECT sql_saga.add_unique_key('establishment_bug', ARRAY['id']); 
       add_unique_key       
----------------------------
 establishment_bug_id_valid
(1 row)

-- Add the temporal foreign key constraint
SELECT sql_saga.add_foreign_key('establishment_bug', ARRAY['legal_unit_id'], 'valid', 'legal_unit_bug_id_valid');
            add_foreign_key            
---------------------------------------
 establishment_bug_legal_unit_id_valid
(1 row)

INSERT INTO legal_unit_bug (id, valid_from, valid_until, name) VALUES
(1, '2023-12-31', 'infinity', 'Parent LU');
-- This should succeed, as the child's validity is fully contained within the parent's.
INSERT INTO establishment_bug (id, legal_unit_id, valid_from, valid_until, name) VALUES
(101, 1, '2024-01-01', '2025-01-01', 'Child EST');
-- Verify insert
SELECT * FROM establishment_bug;
 id  | legal_unit_id | valid_from | valid_until |   name    
-----+---------------+------------+-------------+-----------
 101 |             1 | 01-01-2024 | 01-01-2025  | Child EST
(1 row)

DROP TABLE establishment_bug;
DROP TABLE legal_unit_bug;
