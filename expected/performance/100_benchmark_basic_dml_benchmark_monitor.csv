log_id,event,label,queryid,calls,total_exec_time,rows,shared_blks_hit,shared_blks_read,temp_blks_read,temp_blks_written,total_plan_time,wal_records,wal_bytes,query
374,Child INSERT (No Index),,-5683311921375707623,1,27.889375,1000,20029,8,0,0,0,8023,717368,"INSERT INTO establishment SELECT i, '2015-01-01', 'infinity', i, 'New Shop ' || i FROM generate_series(10001, 11000) i"
5f5,Child INSERT (No Index),,-709681062730457038,1000,1.6644059999999918,1000,2996,4,0,0,0,0,0,"SELECT COALESCE((  SELECT sql_saga.covers_without_gaps(    daterange(uk.valid_from, uk.valid_until),    daterange($2, $3)    ORDER BY uk.valid_from  )  FROM public.legal_unit AS uk  WHERE uk.id = $1), false)"
91c,Child INSERT (With Index),,-5683311921375707623,1,34.003043,1000,22025,3,0,0,0,10033,950856,"INSERT INTO establishment SELECT i, '2015-01-01', 'infinity', i, 'New Shop ' || i FROM generate_series(11001, 12000) i"
291,Child INSERT (With Index),,-709681062730457038,1000,1.6433589999999916,1000,2997,3,0,0,0,0,0,"SELECT COALESCE((  SELECT sql_saga.covers_without_gaps(    daterange(uk.valid_from, uk.valid_until),    daterange($2, $3)    ORDER BY uk.valid_from  )  FROM public.legal_unit AS uk  WHERE uk.id = $1), false)"
a01,Child UPDATE Key (No Index),,4957348812407031190,1,22.348626,1000,26065,8,0,0,0,7045,575770,UPDATE establishment SET valid_from = '2014-01-01' WHERE id BETWEEN 1 AND 1000
125,Child UPDATE Key (No Index),,-709681062730457038,1000,1.8587439999999988,1000,4000,0,0,0,0,8,2700,"SELECT COALESCE((  SELECT sql_saga.covers_without_gaps(    daterange(uk.valid_from, uk.valid_until),    daterange($2, $3)    ORDER BY uk.valid_from  )  FROM public.legal_unit AS uk  WHERE uk.id = $1), false)"
ae4,Child UPDATE Key (With Index),,4957348812407031190,1,25.673875,1000,27927,7,0,0,0,8008,662496,UPDATE establishment SET valid_from = '2013-01-01' WHERE id BETWEEN 2001 AND 3000
bb9,Child UPDATE Key (With Index),,-709681062730457038,1000,1.8727649999999976,1000,3963,0,0,0,0,9,2706,"SELECT COALESCE((  SELECT sql_saga.covers_without_gaps(    daterange(uk.valid_from, uk.valid_until),    daterange($2, $3)    ORDER BY uk.valid_from  )  FROM public.legal_unit AS uk  WHERE uk.id = $1), false)"
50b,Child UPDATE Non-Key (No Index),,-9176477994632381861,1,17.826458,1000,21477,7,0,0,0,6864,540268,UPDATE establishment SET postal_place = 'New Place' WHERE id BETWEEN 1001 AND 2000
9d1,Child UPDATE Non-Key (With Index),,-9176477994632381861,1,21.098292,1000,23972,6,0,0,0,8013,632274,UPDATE establishment SET postal_place = 'New Place Again' WHERE id BETWEEN 3001 AND 4000
aef,"Parent DELETE (Check Only, No Index)",,8871231416156437531,1,420.568375,1000,80017,0,0,0,0,1000,54000,DELETE FROM legal_unit WHERE id BETWEEN 20001 AND 21000
85a,"Parent DELETE (Check Only, No Index)",,768638964964170103,1000,410.3036770000005,1000,74000,0,0,0,0,0,0,"SELECT EXISTS (SELECT 1 FROM public.establishment AS fk WHERE fk.legal_unit_id = $1 AND COALESCE(NOT (SELECT sql_saga.covers_without_gaps(daterange(uk.valid_from, uk.valid_until), daterange(fk.valid_from, fk.valid_until) ORDER BY uk.valid_from) FROM public.legal_unit AS uk WHERE fk.legal_unit_id = uk.id AND NOT (uk.id = $1 AND uk.valid_from = $2 AND uk.valid_until = $3)), true))"
3d8,"Parent DELETE (Check Only, No Index)",,2721666219029128538,1000,0.7867289999999966,1000,2000,0,0,0,0,0,0,SELECT EXISTS (SELECT 1 FROM public.projects AS fk WHERE fk.legal_unit_id = $1)
fad,"Parent DELETE (Check Only, With Index)",,8871231416156437531,1,10.893916,1000,7017,0,0,0,0,1000,54000,DELETE FROM legal_unit WHERE id BETWEEN 21001 AND 22000
436,"Parent DELETE (Check Only, With Index)",,768638964964170103,1000,2.1420650000000014,1000,1000,0,0,0,0,0,0,"SELECT EXISTS (SELECT 1 FROM public.establishment AS fk WHERE fk.legal_unit_id = $1 AND COALESCE(NOT (SELECT sql_saga.covers_without_gaps(daterange(uk.valid_from, uk.valid_until), daterange(fk.valid_from, fk.valid_until) ORDER BY uk.valid_from) FROM public.legal_unit AS uk WHERE fk.legal_unit_id = uk.id AND NOT (uk.id = $1 AND uk.valid_from = $2 AND uk.valid_until = $3)), true))"
75c,"Parent DELETE (Check Only, With Index)",,2721666219029128538,1000,0.6230819999999961,1000,2000,0,0,0,0,0,0,SELECT EXISTS (SELECT 1 FROM public.projects AS fk WHERE fk.legal_unit_id = $1)
3d7,Parent DELETE (No Index),,8871231416156437531,1,438.11145899999997,1000,80029,4,0,0,0,1000,54000,DELETE FROM legal_unit WHERE id BETWEEN 15001 AND 16000
c55,Parent DELETE (No Index),,768638964964170103,1000,423.59994699999953,1000,74000,0,0,0,0,0,0,"SELECT EXISTS (SELECT 1 FROM public.establishment AS fk WHERE fk.legal_unit_id = $1 AND COALESCE(NOT (SELECT sql_saga.covers_without_gaps(daterange(uk.valid_from, uk.valid_until), daterange(fk.valid_from, fk.valid_until) ORDER BY uk.valid_from) FROM public.legal_unit AS uk WHERE fk.legal_unit_id = uk.id AND NOT (uk.id = $1 AND uk.valid_from = $2 AND uk.valid_until = $3)), true))"
07f,Parent DELETE (No Index),,2721666219029128538,1000,1.1404090000000005,1000,2000,0,0,0,0,0,0,SELECT EXISTS (SELECT 1 FROM public.projects AS fk WHERE fk.legal_unit_id = $1)
4e2,Parent DELETE (With Index),,8871231416156437531,1,11.370333,1000,7015,3,0,0,0,1001,54236,DELETE FROM legal_unit WHERE id BETWEEN 16001 AND 17000
543,Parent DELETE (With Index),,768638964964170103,1000,2.254991000000003,1000,1000,0,0,0,0,0,0,"SELECT EXISTS (SELECT 1 FROM public.establishment AS fk WHERE fk.legal_unit_id = $1 AND COALESCE(NOT (SELECT sql_saga.covers_without_gaps(daterange(uk.valid_from, uk.valid_until), daterange(fk.valid_from, fk.valid_until) ORDER BY uk.valid_from) FROM public.legal_unit AS uk WHERE fk.legal_unit_id = uk.id AND NOT (uk.id = $1 AND uk.valid_from = $2 AND uk.valid_until = $3)), true))"
784,Parent DELETE (With Index),,2721666219029128538,1000,0.6614619999999918,1000,2000,0,0,0,0,0,0,SELECT EXISTS (SELECT 1 FROM public.projects AS fk WHERE fk.legal_unit_id = $1)
79b,Parent INSERT (No Index),,-2322232348497488706,1,32.344333000000006,1000,16033,2,0,0,0,8025,717888,"INSERT INTO legal_unit SELECT i, '2015-01-01', 'infinity', 'New Company ' || i FROM generate_series(20001, 21000) i"
53e,Parent INSERT (With Index),,-2322232348497488706,1,33.389542,1000,16024,0,0,0,0,8024,723760,"INSERT INTO legal_unit SELECT i, '2015-01-01', 'infinity', 'New Company ' || i FROM generate_series(21001, 22000) i"
a20,Parent UPDATE Key (No Index),,-5276012643209630211,1,455.620251,1000,102111,3,0,0,0,7036,563829,UPDATE legal_unit SET valid_from = '2014-01-01' WHERE id BETWEEN 1 AND 1000
721,Parent UPDATE Key (No Index),,-2633398863315780408,1000,427.22211700000025,1000,78000,0,0,0,0,0,0,"SELECT EXISTS (SELECT 1 FROM public.establishment AS fk WHERE fk.legal_unit_id = $1 AND COALESCE(NOT (SELECT sql_saga.covers_without_gaps(daterange(sub_uk.valid_from, sub_uk.valid_until), daterange(fk.valid_from, fk.valid_until) ORDER BY sub_uk.valid_from) FROM (SELECT id, valid_from, valid_until FROM public.legal_unit AS uk WHERE TRUE  AND NOT (uk.id = $1 AND uk.valid_from = $2 AND uk.valid_until = $3)  UNION ALL SELECT $4, $5, $6)  AS sub_uk(id, valid_from, valid_until) WHERE fk.legal_unit_id = sub_uk.id), true))"
4ac,Parent UPDATE Key (With Index),,-5276012643209630211,1,41.527584,1000,31005,3,0,0,0,7005,570295,UPDATE legal_unit SET valid_from = '2013-01-01' WHERE id BETWEEN 2001 AND 3000
f11,Parent UPDATE Key (With Index),,-2633398863315780408,1000,12.797138999999927,1000,6963,0,0,0,0,1,220,"SELECT EXISTS (SELECT 1 FROM public.establishment AS fk WHERE fk.legal_unit_id = $1 AND COALESCE(NOT (SELECT sql_saga.covers_without_gaps(daterange(sub_uk.valid_from, sub_uk.valid_until), daterange(fk.valid_from, fk.valid_until) ORDER BY sub_uk.valid_from) FROM (SELECT id, valid_from, valid_until FROM public.legal_unit AS uk WHERE TRUE  AND NOT (uk.id = $1 AND uk.valid_from = $2 AND uk.valid_until = $3)  UNION ALL SELECT $4, $5, $6)  AS sub_uk(id, valid_from, valid_until) WHERE fk.legal_unit_id = sub_uk.id), true))"
abd,Parent UPDATE Non-Key (No Index),,4134591231443895670,1,20.663207999999997,1000,21196,3,0,0,0,6774,536054,UPDATE legal_unit SET name = 'Updated Company' WHERE id BETWEEN 1001 AND 2000
719,Parent UPDATE Non-Key (With Index),,4134591231443895670,1,22.512791,1000,21911,2,0,0,0,6994,550752,UPDATE legal_unit SET name = 'Updated Again Company' WHERE id BETWEEN 3001 AND 4000
c9f,Regular INSERT (No Index),,-1147524894620603886,1000,5.159281999999989,1000,3000,0,0,0,0,0,0,SELECT EXISTS (SELECT 1 FROM public.legal_unit AS uk WHERE uk.id = $1)
bb4,Regular INSERT (With Index),,-1147524894620603886,1000,5.074462000000002,1000,3000,0,0,0,0,0,0,SELECT EXISTS (SELECT 1 FROM public.legal_unit AS uk WHERE uk.id = $1)
db1,temporal_merge Child (With Index),,8113783168561696311,1,468.666792,0,140240,6,0,0,0,12692,1203874,"CALL sql_saga.temporal_merge('establishment'::regclass, 'establishment_source'::regclass, ARRAY['id'])"
e0b,temporal_merge Child (With Index),,6752311366769206914,1,326.549083,1000,12936,0,0,0,0,3494,421794,"INSERT INTO temporal_merge_plan     SELECT * FROM sql_saga.temporal_merge_plan(         target_table => temporal_merge.target_table,         source_table => temporal_merge.source_table,         mode => temporal_merge.mode,         era_name => temporal_merge.era_name,         identity_columns => v_identity_cols_discovered,         row_id_column => temporal_merge.row_id_column,         founding_id_column => temporal_merge.founding_id_column,         delete_mode => temporal_merge.delete_mode,         lookup_keys => v_natural_identity_keys_discovered,         ephemeral_columns => temporal_merge.ephemeral_columns,         p_log_trace => v_log_trace,         p_log_sql => v_log_sql     )"
fd6,temporal_merge Child (With Index),,-5292792094789818799,1,165.256333,1000,478,0,0,0,0,141,16321,"CREATE TEMP TABLE resolved_atomic_segments_with_payloads ON COMMIT DROP AS                 SELECT                     with_base_payload.*,                     with_base_payload.stable_pk_payload as propagated_stable_pk_payload                 FROM (                     SELECT                         seg.grouping_key, seg.canonical_nk_json, seg.id, seg.causal_id, seg.is_new_entity, seg.is_identifiable, seg.is_ambiguous, seg.conflicting_ids, seg.stable_identity_columns_are_null, seg.natural_identity_column_values_are_null, seg.valid_from, seg.valid_until,                         target_payloads.t_valid_from, target_payloads.t_valid_until, source_payloads.source_row_id, source_payloads.contributing_row_ids, source_payloads.data_payload as s_data_payload, source_payloads.ephemeral_payload as s_ephemeral_payload,                         target_payloads.data_payload as t_data_payload, target_payloads.ephemeral_payload as t_ephemeral_payload, seg.stable_pk_payload, source_payloads.causal_id as s_causal_id, source_payloads.causal_id as direct_source_causal_id,                         source_payloads.valid_from AS s_valid_from, source_payloads.valid_until AS s_valid_until, NULL::jsonb as trace                     FROM atomic_segments seg                     LEFT JOIN LATERAL (                         SELECT target_row.data_payload, target_row.ephemeral_payload, target_row.valid_from as t_valid_from, target_row.valid_until as t_valid_until, target_row.stable_pk_payload                         FROM target_rows target_row                         WHERE (target_row.id = seg.id OR (target_row.id IS NULL AND seg.id IS NULL)) AND daterange(seg.valid_from, seg.valid_until) <@ daterange(target_row.valid_from, target_row.valid_until)                     ) target_payloads ON true                                              LEFT JOIN LATERAL (                             WITH RECURSIVE ordered_sources AS (                                 SELECT                                     source_row.source_row_id, source_row.data_payload, sou"
5de,temporal_merge Child (With Index),,-1351349978174066644,1,140.105291,0,126226,6,0,0,0,9036,764522,"CALL sql_saga.temporal_merge_execute(         target_table => temporal_merge.target_table,         source_table => temporal_merge.source_table,         identity_columns => v_identity_cols_discovered,         mode => temporal_merge.mode,         era_name => temporal_merge.era_name,         row_id_column => temporal_merge.row_id_column,         founding_id_column => temporal_merge.founding_id_column,         update_source_with_identity => temporal_merge.update_source_with_identity,         lookup_columns => v_natural_identity_cols_discovered,         delete_mode => temporal_merge.delete_mode,         update_source_with_feedback => temporal_merge.update_source_with_feedback,         feedback_status_column => temporal_merge.feedback_status_column,         feedback_status_key => temporal_merge.feedback_status_key,         feedback_error_column => temporal_merge.feedback_error_column,         feedback_error_key => temporal_merge.feedback_error_key,         ephemeral_columns => temporal_merge.ephemeral_columns,         delay_constraints => temporal_merge.delay_constraints     )"
d30,temporal_merge Child (With Index),,6563778735504961460,1,130.654875,1000,124369,6,0,0,0,8783,736577,"UPDATE establishment t SET valid_from = p.new_valid_from::date, valid_until = p.new_valid_until::date, legal_unit_id = CASE WHEN p.data ? 'legal_unit_id' THEN (p.data->>'legal_unit_id')::integer ELSE t.legal_unit_id END, postal_place = CASE WHEN p.data ? 'postal_place' THEN (p.data->>'postal_place')::text ELSE t.postal_place END                         FROM (SELECT * FROM temporal_merge_plan WHERE operation = 'UPDATE' ORDER BY plan_op_seq) p,                              LATERAL jsonb_populate_record(null::establishment, p.entity_keys) AS jpr_entity                         WHERE (t.id = jpr_entity.id OR (t.id IS NULL AND jpr_entity.id IS NULL)) AND t.valid_from = p.old_valid_from::date"
e1b,temporal_merge Child (With Index),,-3246557568488238293,1,35.794583,1000,405,0,0,0,0,116,12960,"CREATE TEMP TABLE source_with_eclipsed_flag ON COMMIT DROP AS                 SELECT                     s1.*,                     eclipse_info.is_eclipsed,                     eclipse_info.eclipsed_by                 FROM source_initial s1                 CROSS JOIN LATERAL (                     SELECT                         COALESCE(sql_saga.covers_without_gaps(daterange(s2.valid_from, s2.valid_until), daterange(s1.valid_from, s1.valid_until) ORDER BY s2.valid_from), false) as is_eclipsed,                         array_agg(s2.source_row_id) as eclipsed_by                     FROM source_initial s2                     WHERE                         (                             (NOT s1.natural_identity_column_values_are_null AND (s1.id IS NOT DISTINCT FROM s2.id))                             OR                             (s1.natural_identity_column_values_are_null AND s1.causal_id = s2.causal_id)                         )                         AND                         -- Only consider newer rows (higher row_id) as potential eclipsers.                         s2.source_row_id > s1.source_row_id                 ) eclipse_info"
681,temporal_merge Child (With Index),,-8149450763123319499,1,28.869791,1000,377,0,0,0,0,120,13609,"CREATE TEMP TABLE source_rows_with_matches ON COMMIT DROP AS                 SELECT                     source_row.*,                     target_row.stable_pk_payload as discovered_stable_pk_payload,                     target_row.id AS discovered_id_1, target_row.valid_from AS discovered_id_2 /* v_propagated_id_cols_list */                 FROM source_with_eclipsed_flag source_row                 LEFT JOIN target_rows target_row ON (((source_row.id IS NOT DISTINCT FROM target_row.id)) /* v_source_rows_exists_join_expr */)"
238,temporal_merge Child (With Index),,-4487253030630926212,1,10.364459,4000,352,0,0,0,0,117,13105,"CREATE TEMP TABLE time_points_unified ON COMMIT DROP AS                 SELECT                     *,                     CASE                 WHEN is_new_entity                 THEN 'new_entity__' || CASE WHEN canonical_nk_json IS NOT NULL AND canonical_nk_json <> '{}'::jsonb THEN COALESCE(canonical_nk_json->>'id', '_NULL_') ELSE COALESCE(id::text, '_NULL_') END                 ELSE 'existing_entity__' || COALESCE(id::text, '_NULL_')             END AS grouping_key,                     CASE                         WHEN is_new_entity THEN causal_id                         ELSE FIRST_VALUE(causal_id) OVER (PARTITION BY CASE                 WHEN is_new_entity                 THEN 'new_entity__' || CASE WHEN canonical_nk_json IS NOT NULL AND canonical_nk_json <> '{}'::jsonb THEN COALESCE(canonical_nk_json->>'id', '_NULL_') ELSE COALESCE(id::text, '_NULL_') END                 ELSE 'existing_entity__' || COALESCE(id::text, '_NULL_')             END ORDER BY causal_id ASC NULLS LAST)                     END as unified_causal_id,                     FIRST_VALUE(stable_pk_payload) OVER (PARTITION BY CASE                 WHEN is_new_entity                 THEN 'new_entity__' || CASE WHEN canonical_nk_json IS NOT NULL AND canonical_nk_json <> '{}'::jsonb THEN COALESCE(canonical_nk_json->>'id', '_NULL_') ELSE COALESCE(id::text, '_NULL_') END                 ELSE 'existing_entity__' || COALESCE(id::text, '_NULL_')             END ORDER BY causal_id ASC NULLS FIRST) as unified_stable_pk_payload,                     FIRST_VALUE(canonical_nk_json) OVER (PARTITION BY CASE                 WHEN is_new_entity                 THEN 'new_entity__' || CASE WHEN canonical_nk_json IS NOT NULL AND canonical_nk_json <> '{}'::jsonb THEN COALESCE(canonical_nk_json->>'id', '_NULL_') ELSE COALESCE(id::text, '_NULL_') END                 ELSE 'existing_entity__' || COALESCE(id::text, '_NULL_')             END ORDER BY causal_id ASC NULLS FIRST) as unified_canonical_nk_json                 FROM time_points_raw"
4fb,temporal_merge Child (With Index),,-709681062730457038,1000,1.9888239999999957,1000,3952,0,0,0,0,8,2530,"SELECT COALESCE((  SELECT sql_saga.covers_without_gaps(    daterange(uk.valid_from, uk.valid_until),    daterange($2, $3)    ORDER BY uk.valid_from  )  FROM public.legal_unit AS uk  WHERE uk.id = $1), false)"
1dc,temporal_merge Parent (With Index),,8113783168561696311,1,516.635291,0,211463,3,0,0,0,11758,1136665,"CALL sql_saga.temporal_merge('legal_unit'::regclass, 'legal_unit_source'::regclass, ARRAY['id'])"
7bd,temporal_merge Parent (With Index),,8922815023363006661,1,320.497625,1000,12330,0,0,0,0,3620,435017,"INSERT INTO temporal_merge_plan     SELECT * FROM sql_saga.temporal_merge_plan(         target_table => temporal_merge.target_table,         source_table => temporal_merge.source_table,         mode => temporal_merge.mode,         era_name => temporal_merge.era_name,         identity_columns => v_identity_cols_discovered,         row_id_column => temporal_merge.row_id_column,         founding_id_column => temporal_merge.founding_id_column,         delete_mode => temporal_merge.delete_mode,         lookup_keys => v_natural_identity_keys_discovered,         ephemeral_columns => temporal_merge.ephemeral_columns,         p_log_trace => v_log_trace,         p_log_sql => v_log_sql     )"
a28,temporal_merge Parent (With Index),,-1351349978174066644,1,194.042,0,198481,3,0,0,0,7970,682881,"CALL sql_saga.temporal_merge_execute(         target_table => temporal_merge.target_table,         source_table => temporal_merge.source_table,         identity_columns => v_identity_cols_discovered,         mode => temporal_merge.mode,         era_name => temporal_merge.era_name,         row_id_column => temporal_merge.row_id_column,         founding_id_column => temporal_merge.founding_id_column,         update_source_with_identity => temporal_merge.update_source_with_identity,         lookup_columns => v_natural_identity_cols_discovered,         delete_mode => temporal_merge.delete_mode,         update_source_with_feedback => temporal_merge.update_source_with_feedback,         feedback_status_column => temporal_merge.feedback_status_column,         feedback_status_key => temporal_merge.feedback_status_key,         feedback_error_column => temporal_merge.feedback_error_column,         feedback_error_key => temporal_merge.feedback_error_key,         ephemeral_columns => temporal_merge.ephemeral_columns,         delay_constraints => temporal_merge.delay_constraints     )"
862,temporal_merge Parent (With Index),,4924003276435800856,1,184.174,1000,197093,3,0,0,0,7720,651620,"UPDATE legal_unit t SET valid_from = p.new_valid_from::date, valid_until = p.new_valid_until::date, name = CASE WHEN p.data ? 'name' THEN (p.data->>'name')::character varying ELSE t.name END                         FROM (SELECT * FROM temporal_merge_plan WHERE operation = 'UPDATE' ORDER BY plan_op_seq) p,                              LATERAL jsonb_populate_record(null::legal_unit, p.entity_keys) AS jpr_entity                         WHERE (t.id = jpr_entity.id OR (t.id IS NULL AND jpr_entity.id IS NULL)) AND t.valid_from = p.old_valid_from::date"
1b3,temporal_merge Parent (With Index),,-3194243438903830979,1,161.97825,1000,472,0,0,0,0,141,16359,"CREATE TEMP TABLE resolved_atomic_segments_with_payloads ON COMMIT DROP AS                 SELECT                     with_base_payload.*,                     with_base_payload.stable_pk_payload as propagated_stable_pk_payload                 FROM (                     SELECT                         seg.grouping_key, seg.canonical_nk_json, seg.id, seg.causal_id, seg.is_new_entity, seg.is_identifiable, seg.is_ambiguous, seg.conflicting_ids, seg.stable_identity_columns_are_null, seg.natural_identity_column_values_are_null, seg.valid_from, seg.valid_until,                         target_payloads.t_valid_from, target_payloads.t_valid_until, source_payloads.source_row_id, source_payloads.contributing_row_ids, source_payloads.data_payload as s_data_payload, source_payloads.ephemeral_payload as s_ephemeral_payload,                         target_payloads.data_payload as t_data_payload, target_payloads.ephemeral_payload as t_ephemeral_payload, seg.stable_pk_payload, source_payloads.causal_id as s_causal_id, source_payloads.causal_id as direct_source_causal_id,                         source_payloads.valid_from AS s_valid_from, source_payloads.valid_until AS s_valid_until, NULL::jsonb as trace                     FROM atomic_segments seg                     LEFT JOIN LATERAL (                         SELECT target_row.data_payload, target_row.ephemeral_payload, target_row.valid_from as t_valid_from, target_row.valid_until as t_valid_until, target_row.stable_pk_payload                         FROM target_rows target_row                         WHERE (target_row.id = seg.id OR (target_row.id IS NULL AND seg.id IS NULL)) AND daterange(seg.valid_from, seg.valid_until) <@ daterange(target_row.valid_from, target_row.valid_until)                     ) target_payloads ON true                                              LEFT JOIN LATERAL (                             WITH RECURSIVE ordered_sources AS (                                 SELECT                                     source_row.source_row_id, source_row.data_payload, sou"
c08,temporal_merge Parent (With Index),,2242788465452750338,1,35.834042,1000,389,0,0,0,0,121,13513,"CREATE TEMP TABLE source_with_eclipsed_flag ON COMMIT DROP AS                 SELECT                     s1.*,                     eclipse_info.is_eclipsed,                     eclipse_info.eclipsed_by                 FROM source_initial s1                 CROSS JOIN LATERAL (                     SELECT                         COALESCE(sql_saga.covers_without_gaps(daterange(s2.valid_from, s2.valid_until), daterange(s1.valid_from, s1.valid_until) ORDER BY s2.valid_from), false) as is_eclipsed,                         array_agg(s2.source_row_id) as eclipsed_by                     FROM source_initial s2                     WHERE                         (                             (NOT s1.natural_identity_column_values_are_null AND (s1.id IS NOT DISTINCT FROM s2.id))                             OR                             (s1.natural_identity_column_values_are_null AND s1.causal_id = s2.causal_id)                         )                         AND                         -- Only consider newer rows (higher row_id) as potential eclipsers.                         s2.source_row_id > s1.source_row_id                 ) eclipse_info"
960,temporal_merge Parent (With Index),,-8442734755493920816,1,28.917333,1000,371,0,0,0,0,122,14642,"CREATE TEMP TABLE source_rows_with_matches ON COMMIT DROP AS                 SELECT                     source_row.*,                     target_row.stable_pk_payload as discovered_stable_pk_payload,                     target_row.id AS discovered_id_1, target_row.valid_from AS discovered_id_2 /* v_propagated_id_cols_list */                 FROM source_with_eclipsed_flag source_row                 LEFT JOIN target_rows target_row ON (((source_row.id IS NOT DISTINCT FROM target_row.id)) /* v_source_rows_exists_join_expr */)"
efc,temporal_merge Parent (With Index),,-723818755514887545,1,10.402458,4000,346,0,0,0,0,120,14323,"CREATE TEMP TABLE time_points_unified ON COMMIT DROP AS                 SELECT                     *,                     CASE                 WHEN is_new_entity                 THEN 'new_entity__' || CASE WHEN canonical_nk_json IS NOT NULL AND canonical_nk_json <> '{}'::jsonb THEN COALESCE(canonical_nk_json->>'id', '_NULL_') ELSE COALESCE(id::text, '_NULL_') END                 ELSE 'existing_entity__' || COALESCE(id::text, '_NULL_')             END AS grouping_key,                     CASE                         WHEN is_new_entity THEN causal_id                         ELSE FIRST_VALUE(causal_id) OVER (PARTITION BY CASE                 WHEN is_new_entity                 THEN 'new_entity__' || CASE WHEN canonical_nk_json IS NOT NULL AND canonical_nk_json <> '{}'::jsonb THEN COALESCE(canonical_nk_json->>'id', '_NULL_') ELSE COALESCE(id::text, '_NULL_') END                 ELSE 'existing_entity__' || COALESCE(id::text, '_NULL_')             END ORDER BY causal_id ASC NULLS LAST)                     END as unified_causal_id,                     FIRST_VALUE(stable_pk_payload) OVER (PARTITION BY CASE                 WHEN is_new_entity                 THEN 'new_entity__' || CASE WHEN canonical_nk_json IS NOT NULL AND canonical_nk_json <> '{}'::jsonb THEN COALESCE(canonical_nk_json->>'id', '_NULL_') ELSE COALESCE(id::text, '_NULL_') END                 ELSE 'existing_entity__' || COALESCE(id::text, '_NULL_')             END ORDER BY causal_id ASC NULLS FIRST) as unified_stable_pk_payload,                     FIRST_VALUE(canonical_nk_json) OVER (PARTITION BY CASE                 WHEN is_new_entity                 THEN 'new_entity__' || CASE WHEN canonical_nk_json IS NOT NULL AND canonical_nk_json <> '{}'::jsonb THEN COALESCE(canonical_nk_json->>'id', '_NULL_') ELSE COALESCE(id::text, '_NULL_') END                 ELSE 'existing_entity__' || COALESCE(id::text, '_NULL_')             END ORDER BY causal_id ASC NULLS FIRST) as unified_canonical_nk_json                 FROM time_points_raw"
