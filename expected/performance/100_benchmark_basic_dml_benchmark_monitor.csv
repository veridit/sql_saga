log_id,event,label,queryid,calls,total_exec_time,rows,shared_blks_hit,shared_blks_read,temp_blks_read,temp_blks_written,total_plan_time,wal_records,wal_bytes,query
69f,Child INSERT (No Index),,-6991401856414377255,1,27.100291,1000,20029,8,0,0,0,8023,717368,"INSERT INTO establishment SELECT i, '2015-01-01', 'infinity', i, 'New Shop ' || i FROM generate_series(10001, 11000) i"
9c3,Child INSERT (No Index),,5092525902919590592,1000,1.602073999999993,1000,2996,4,0,0,0,0,0,"SELECT COALESCE((  SELECT sql_saga.covers_without_gaps(    daterange(uk.valid_from, uk.valid_until),    daterange($2, $3)    ORDER BY uk.valid_from  )  FROM public.legal_unit AS uk  WHERE uk.id = $1), false)"
a0d,Child INSERT (With Index),,-6991401856414377255,1,33.325584,1000,22025,3,0,0,0,10033,950856,"INSERT INTO establishment SELECT i, '2015-01-01', 'infinity', i, 'New Shop ' || i FROM generate_series(11001, 12000) i"
25c,Child INSERT (With Index),,5092525902919590592,1000,1.6177639999999933,1000,2997,3,0,0,0,0,0,"SELECT COALESCE((  SELECT sql_saga.covers_without_gaps(    daterange(uk.valid_from, uk.valid_until),    daterange($2, $3)    ORDER BY uk.valid_from  )  FROM public.legal_unit AS uk  WHERE uk.id = $1), false)"
6cc,Child UPDATE Key (No Index),,-7462561645647662925,1,22.0535,1000,26065,8,0,0,0,7045,575770,UPDATE establishment SET valid_from = '2014-01-01' WHERE id BETWEEN 1 AND 1000
834,Child UPDATE Key (No Index),,5092525902919590592,1000,1.791498999999997,1000,4000,0,0,0,0,8,2700,"SELECT COALESCE((  SELECT sql_saga.covers_without_gaps(    daterange(uk.valid_from, uk.valid_until),    daterange($2, $3)    ORDER BY uk.valid_from  )  FROM public.legal_unit AS uk  WHERE uk.id = $1), false)"
344,Child UPDATE Key (With Index),,-7462561645647662925,1,25.394416,1000,27927,7,0,0,0,8008,662496,UPDATE establishment SET valid_from = '2013-01-01' WHERE id BETWEEN 2001 AND 3000
0ad,Child UPDATE Key (With Index),,5092525902919590592,1000,1.7732539999999963,1000,3963,0,0,0,0,9,2706,"SELECT COALESCE((  SELECT sql_saga.covers_without_gaps(    daterange(uk.valid_from, uk.valid_until),    daterange($2, $3)    ORDER BY uk.valid_from  )  FROM public.legal_unit AS uk  WHERE uk.id = $1), false)"
e2b,Child UPDATE Non-Key (No Index),,-2303714785815022703,1,17.311458,1000,21477,7,0,0,0,6864,540268,UPDATE establishment SET postal_place = 'New Place' WHERE id BETWEEN 1001 AND 2000
69b,Child UPDATE Non-Key (With Index),,-2303714785815022703,1,21.800916,1000,23972,6,0,0,0,8013,632274,UPDATE establishment SET postal_place = 'New Place Again' WHERE id BETWEEN 3001 AND 4000
01e,"Parent DELETE (Check Only, No Index)",,-1652527683688995920,1,414.915291,1000,80017,0,0,0,0,1000,54000,DELETE FROM legal_unit WHERE id BETWEEN 20001 AND 21000
352,"Parent DELETE (Check Only, No Index)",,-3380647436433219761,1000,405.1381479999998,1000,74000,0,0,0,0,0,0,"SELECT EXISTS (SELECT 1 FROM public.establishment AS fk WHERE fk.legal_unit_id = $1 AND COALESCE(NOT (SELECT sql_saga.covers_without_gaps(daterange(uk.valid_from, uk.valid_until), daterange(fk.valid_from, fk.valid_until) ORDER BY uk.valid_from) FROM public.legal_unit AS uk WHERE fk.legal_unit_id = uk.id AND NOT (uk.id = $1 AND uk.valid_from = $2 AND uk.valid_until = $3)), true))"
d47,"Parent DELETE (Check Only, No Index)",,-8032905689006061649,1000,0.7623939999999938,1000,2000,0,0,0,0,0,0,SELECT EXISTS (SELECT 1 FROM public.projects AS fk WHERE fk.legal_unit_id = $1)
9cd,"Parent DELETE (Check Only, With Index)",,-1652527683688995920,1,11.151083,1000,7017,0,0,0,0,1000,54000,DELETE FROM legal_unit WHERE id BETWEEN 21001 AND 22000
a6a,"Parent DELETE (Check Only, With Index)",,-3380647436433219761,1000,2.179772999999989,1000,1000,0,0,0,0,0,0,"SELECT EXISTS (SELECT 1 FROM public.establishment AS fk WHERE fk.legal_unit_id = $1 AND COALESCE(NOT (SELECT sql_saga.covers_without_gaps(daterange(uk.valid_from, uk.valid_until), daterange(fk.valid_from, fk.valid_until) ORDER BY uk.valid_from) FROM public.legal_unit AS uk WHERE fk.legal_unit_id = uk.id AND NOT (uk.id = $1 AND uk.valid_from = $2 AND uk.valid_until = $3)), true))"
68c,"Parent DELETE (Check Only, With Index)",,-8032905689006061649,1000,0.6410269999999926,1000,2000,0,0,0,0,0,0,SELECT EXISTS (SELECT 1 FROM public.projects AS fk WHERE fk.legal_unit_id = $1)
e82,Parent DELETE (No Index),,-1652527683688995920,1,413.016375,1000,80029,4,0,0,0,1000,54000,DELETE FROM legal_unit WHERE id BETWEEN 15001 AND 16000
909,Parent DELETE (No Index),,-3380647436433219761,1000,403.26688600000045,1000,74000,0,0,0,0,0,0,"SELECT EXISTS (SELECT 1 FROM public.establishment AS fk WHERE fk.legal_unit_id = $1 AND COALESCE(NOT (SELECT sql_saga.covers_without_gaps(daterange(uk.valid_from, uk.valid_until), daterange(fk.valid_from, fk.valid_until) ORDER BY uk.valid_from) FROM public.legal_unit AS uk WHERE fk.legal_unit_id = uk.id AND NOT (uk.id = $1 AND uk.valid_from = $2 AND uk.valid_until = $3)), true))"
563,Parent DELETE (No Index),,-8032905689006061649,1000,0.7961929999999967,1000,2000,0,0,0,0,0,0,SELECT EXISTS (SELECT 1 FROM public.projects AS fk WHERE fk.legal_unit_id = $1)
78d,Parent DELETE (With Index),,-1652527683688995920,1,11.047042,1000,7015,3,0,0,0,1001,54236,DELETE FROM legal_unit WHERE id BETWEEN 16001 AND 17000
96f,Parent DELETE (With Index),,-3380647436433219761,1000,2.181753999999995,1000,1000,0,0,0,0,0,0,"SELECT EXISTS (SELECT 1 FROM public.establishment AS fk WHERE fk.legal_unit_id = $1 AND COALESCE(NOT (SELECT sql_saga.covers_without_gaps(daterange(uk.valid_from, uk.valid_until), daterange(fk.valid_from, fk.valid_until) ORDER BY uk.valid_from) FROM public.legal_unit AS uk WHERE fk.legal_unit_id = uk.id AND NOT (uk.id = $1 AND uk.valid_from = $2 AND uk.valid_until = $3)), true))"
ccf,Parent DELETE (With Index),,-8032905689006061649,1000,0.6420079999999937,1000,2000,0,0,0,0,0,0,SELECT EXISTS (SELECT 1 FROM public.projects AS fk WHERE fk.legal_unit_id = $1)
a5e,Parent INSERT (No Index),,-5903302481687770180,1,32.098625999999996,1000,16033,2,0,0,0,8025,717888,"INSERT INTO legal_unit SELECT i, '2015-01-01', 'infinity', 'New Company ' || i FROM generate_series(20001, 21000) i"
a48,Parent INSERT (With Index),,-5903302481687770180,1,33.168376,1000,16024,0,0,0,0,8024,723760,"INSERT INTO legal_unit SELECT i, '2015-01-01', 'infinity', 'New Company ' || i FROM generate_series(21001, 22000) i"
0e7,Parent UPDATE Key (No Index),,1960438407940400840,1,457.347584,1000,102111,3,0,0,0,7036,563829,UPDATE legal_unit SET valid_from = '2014-01-01' WHERE id BETWEEN 1 AND 1000
e5b,Parent UPDATE Key (No Index),,3068693599751029347,1000,426.8288860000002,1000,78000,0,0,0,0,0,0,"SELECT EXISTS (SELECT 1 FROM public.establishment AS fk WHERE fk.legal_unit_id = $1 AND COALESCE(NOT (SELECT sql_saga.covers_without_gaps(daterange(sub_uk.valid_from, sub_uk.valid_until), daterange(fk.valid_from, fk.valid_until) ORDER BY sub_uk.valid_from) FROM (SELECT id, valid_from, valid_until FROM public.legal_unit AS uk WHERE TRUE  AND NOT (uk.id = $1 AND uk.valid_from = $2 AND uk.valid_until = $3)  UNION ALL SELECT $4, $5, $6)  AS sub_uk(id, valid_from, valid_until) WHERE fk.legal_unit_id = sub_uk.id), true))"
faf,Parent UPDATE Key (With Index),,1960438407940400840,1,41.159582,1000,31005,3,0,0,0,7005,570295,UPDATE legal_unit SET valid_from = '2013-01-01' WHERE id BETWEEN 2001 AND 3000
d2d,Parent UPDATE Key (With Index),,3068693599751029347,1000,12.613189999999975,1000,6963,0,0,0,0,1,220,"SELECT EXISTS (SELECT 1 FROM public.establishment AS fk WHERE fk.legal_unit_id = $1 AND COALESCE(NOT (SELECT sql_saga.covers_without_gaps(daterange(sub_uk.valid_from, sub_uk.valid_until), daterange(fk.valid_from, fk.valid_until) ORDER BY sub_uk.valid_from) FROM (SELECT id, valid_from, valid_until FROM public.legal_unit AS uk WHERE TRUE  AND NOT (uk.id = $1 AND uk.valid_from = $2 AND uk.valid_until = $3)  UNION ALL SELECT $4, $5, $6)  AS sub_uk(id, valid_from, valid_until) WHERE fk.legal_unit_id = sub_uk.id), true))"
28a,Parent UPDATE Non-Key (No Index),,5101759187734665507,1,19.826792,1000,21196,3,0,0,0,6774,536054,UPDATE legal_unit SET name = 'Updated Company' WHERE id BETWEEN 1001 AND 2000
146,Parent UPDATE Non-Key (With Index),,5101759187734665507,1,21.676167,1000,21911,2,0,0,0,6994,550752,UPDATE legal_unit SET name = 'Updated Again Company' WHERE id BETWEEN 3001 AND 4000
47b,Regular INSERT (No Index),,-586132317995430012,1000,4.964242999999994,1000,3000,0,0,0,0,0,0,SELECT EXISTS (SELECT 1 FROM public.legal_unit AS uk WHERE uk.id = $1)
c36,Regular INSERT (With Index),,-586132317995430012,1000,5.183066999999999,1000,3000,0,0,0,0,0,0,SELECT EXISTS (SELECT 1 FROM public.legal_unit AS uk WHERE uk.id = $1)
5be,temporal_merge Child (With Index),,2371001786807240010,1,580.932708,0,141042,6,0,0,0,12899,1238601,"CALL sql_saga.temporal_merge('establishment'::regclass, 'establishment_source'::regclass, ARRAY['id'])"
4ba,temporal_merge Child (With Index),,-7815463765597169731,1,444.549166,1000,14157,0,0,0,0,3705,455190,"INSERT INTO temporal_merge_plan     SELECT * FROM sql_saga.temporal_merge_plan(         target_table => temporal_merge.target_table,         source_table => temporal_merge.source_table,         mode => temporal_merge.mode,         era_name => temporal_merge.era_name,         identity_columns => v_identity_cols_discovered,         row_id_column => temporal_merge.row_id_column,         founding_id_column => temporal_merge.founding_id_column,         delete_mode => temporal_merge.delete_mode,         lookup_keys => v_natural_identity_keys_discovered,         ephemeral_columns => temporal_merge.ephemeral_columns,         p_log_trace => v_log_trace,         p_log_sql => v_log_sql     )"
2ae,temporal_merge Child (With Index),,5845250379483460755,1,275.182375,1000,512,0,0,0,0,142,20861,"CREATE TEMP TABLE resolved_atomic_segments_with_payloads ON COMMIT DROP AS                 SELECT                     with_base_payload.*,                     with_base_payload.stable_pk_payload as propagated_stable_pk_payload                 FROM (                     SELECT                         seg.grouping_key, seg.canonical_nk_json, seg.id, seg.causal_id, seg.is_new_entity, seg.is_identifiable, seg.is_ambiguous, seg.conflicting_ids, seg.stable_identity_columns_are_null, seg.natural_identity_column_values_are_null, seg.valid_from, seg.valid_until,                         target_payloads.t_valid_from, target_payloads.t_valid_until, source_payloads.source_row_id, source_payloads.contributing_row_ids, source_payloads.data_payload as s_data_payload, source_payloads.ephemeral_payload as s_ephemeral_payload,                         target_payloads.data_payload as t_data_payload, target_payloads.ephemeral_payload as t_ephemeral_payload, seg.stable_pk_payload, source_payloads.causal_id as s_causal_id, source_payloads.causal_id as direct_source_causal_id,                         source_payloads.valid_from AS s_valid_from, source_payloads.valid_until AS s_valid_until, NULL::jsonb as trace                     FROM atomic_segments seg                     LEFT JOIN LATERAL (                         SELECT target_row.data_payload, target_row.ephemeral_payload, target_row.valid_from as t_valid_from, target_row.valid_until as t_valid_until, target_row.stable_pk_payload                         FROM target_rows target_row                         WHERE (target_row.id = seg.id OR (target_row.id IS NULL AND seg.id IS NULL)) AND daterange(seg.valid_from, seg.valid_until) <@ daterange(target_row.valid_from, target_row.valid_until)                     ) target_payloads ON true                                              LEFT JOIN LATERAL (                             WITH RECURSIVE ordered_sources AS (                                 SELECT                                     source_row.source_row_id, source_row.data_payload, sou"
ff3,temporal_merge Child (With Index),,1898143390848601062,1,134.4875,0,126122,6,0,0,0,9030,762109,"CALL sql_saga.temporal_merge_execute(         target_table => temporal_merge.target_table,         source_table => temporal_merge.source_table,         identity_columns => v_identity_cols_discovered,         mode => temporal_merge.mode,         era_name => temporal_merge.era_name,         row_id_column => temporal_merge.row_id_column,         founding_id_column => temporal_merge.founding_id_column,         update_source_with_identity => temporal_merge.update_source_with_identity,         lookup_columns => v_natural_identity_cols_discovered,         delete_mode => temporal_merge.delete_mode,         update_source_with_feedback => temporal_merge.update_source_with_feedback,         feedback_status_column => temporal_merge.feedback_status_column,         feedback_status_key => temporal_merge.feedback_status_key,         feedback_error_column => temporal_merge.feedback_error_column,         feedback_error_key => temporal_merge.feedback_error_key,         ephemeral_columns => temporal_merge.ephemeral_columns,         delay_constraints => temporal_merge.delay_constraints     )"
0d3,temporal_merge Child (With Index),,-1479992253651569476,1,126.03920800000002,1000,124351,6,0,0,0,8775,734047,"UPDATE establishment t SET valid_from = p.new_valid_from::date, valid_until = p.new_valid_until::date, legal_unit_id = CASE WHEN p.data ? 'legal_unit_id' THEN (p.data->>'legal_unit_id')::integer ELSE t.legal_unit_id END, postal_place = CASE WHEN p.data ? 'postal_place' THEN (p.data->>'postal_place')::text ELSE t.postal_place END                         FROM (SELECT * FROM temporal_merge_plan WHERE operation = 'UPDATE' ORDER BY plan_op_seq) p,                              LATERAL jsonb_populate_record(null::establishment, p.entity_keys) AS jpr_entity                         WHERE (t.id = jpr_entity.id OR (t.id IS NULL AND jpr_entity.id IS NULL)) AND t.valid_from = p.old_valid_from::date"
b6c,temporal_merge Child (With Index),,-1847609878117805178,1,37.613667,1000,407,0,0,0,0,114,12795,"CREATE TEMP TABLE source_with_eclipsed_flag ON COMMIT DROP AS                 SELECT                     s1.*,                     eclipse_info.is_eclipsed,                     eclipse_info.eclipsed_by                 FROM source_initial s1                 CROSS JOIN LATERAL (                     SELECT                         COALESCE(sql_saga.covers_without_gaps(daterange(s2.valid_from, s2.valid_until), daterange(s1.valid_from, s1.valid_until) ORDER BY s2.valid_from), false) as is_eclipsed,                         array_agg(s2.source_row_id) as eclipsed_by                     FROM source_initial s2                     WHERE                         (                             (NOT s1.natural_identity_column_values_are_null AND (s1.id IS NOT DISTINCT FROM s2.id))                             OR                             (s1.natural_identity_column_values_are_null AND s1.causal_id = s2.causal_id)                         )                         AND                         -- Only consider newer rows (higher row_id) as potential eclipsers.                         s2.source_row_id > s1.source_row_id                 ) eclipse_info"
4c6,temporal_merge Child (With Index),,1783377393323559261,1,29.596333,1000,380,0,0,0,0,122,14465,"CREATE TEMP TABLE source_rows_with_matches ON COMMIT DROP AS                 SELECT                     source_row.*,                     target_row.stable_pk_payload as discovered_stable_pk_payload,                     target_row.id AS discovered_id_1, target_row.valid_from AS discovered_id_2 /* v_propagated_id_cols_list */                 FROM source_with_eclipsed_flag source_row                 LEFT JOIN target_rows target_row ON (((source_row.id IS NOT DISTINCT FROM target_row.id)) /* v_source_rows_exists_join_expr */)"
15d,temporal_merge Child (With Index),,-594626294645549547,1,10.140208,4000,357,0,0,0,0,118,13851,"CREATE TEMP TABLE time_points_unified ON COMMIT DROP AS                 SELECT                     *,                     CASE                 WHEN is_new_entity                 THEN 'new_entity__' || CASE WHEN canonical_nk_json IS NOT NULL AND canonical_nk_json <> '{}'::jsonb THEN COALESCE(canonical_nk_json->>'id', '_NULL_') ELSE COALESCE(id::text, '_NULL_') END                 ELSE 'existing_entity__' || COALESCE(id::text, '_NULL_')             END AS grouping_key,                     CASE                         WHEN is_new_entity THEN causal_id                         ELSE FIRST_VALUE(causal_id) OVER (PARTITION BY CASE                 WHEN is_new_entity                 THEN 'new_entity__' || CASE WHEN canonical_nk_json IS NOT NULL AND canonical_nk_json <> '{}'::jsonb THEN COALESCE(canonical_nk_json->>'id', '_NULL_') ELSE COALESCE(id::text, '_NULL_') END                 ELSE 'existing_entity__' || COALESCE(id::text, '_NULL_')             END ORDER BY causal_id ASC NULLS LAST)                     END as unified_causal_id,                     FIRST_VALUE(stable_pk_payload) OVER (PARTITION BY CASE                 WHEN is_new_entity                 THEN 'new_entity__' || CASE WHEN canonical_nk_json IS NOT NULL AND canonical_nk_json <> '{}'::jsonb THEN COALESCE(canonical_nk_json->>'id', '_NULL_') ELSE COALESCE(id::text, '_NULL_') END                 ELSE 'existing_entity__' || COALESCE(id::text, '_NULL_')             END ORDER BY causal_id ASC NULLS FIRST) as unified_stable_pk_payload,                     FIRST_VALUE(canonical_nk_json) OVER (PARTITION BY CASE                 WHEN is_new_entity                 THEN 'new_entity__' || CASE WHEN canonical_nk_json IS NOT NULL AND canonical_nk_json <> '{}'::jsonb THEN COALESCE(canonical_nk_json->>'id', '_NULL_') ELSE COALESCE(id::text, '_NULL_') END                 ELSE 'existing_entity__' || COALESCE(id::text, '_NULL_')             END ORDER BY causal_id ASC NULLS FIRST) as unified_canonical_nk_json                 FROM time_points_raw"
011,temporal_merge Child (With Index),,5092525902919590592,1000,1.9211869999999953,1000,3952,0,0,0,0,0,0,"SELECT COALESCE((  SELECT sql_saga.covers_without_gaps(    daterange(uk.valid_from, uk.valid_until),    daterange($2, $3)    ORDER BY uk.valid_from  )  FROM public.legal_unit AS uk  WHERE uk.id = $1), false)"
39e,temporal_merge Parent (With Index),,2371001786807240010,1,629.43875,0,212793,4,0,0,0,11973,1176291,"CALL sql_saga.temporal_merge('legal_unit'::regclass, 'legal_unit_source'::regclass, ARRAY['id'])"
b73,temporal_merge Parent (With Index),,1766221795916450207,1,430.740209,1000,13694,1,0,0,0,3838,478775,"INSERT INTO temporal_merge_plan     SELECT * FROM sql_saga.temporal_merge_plan(         target_table => temporal_merge.target_table,         source_table => temporal_merge.source_table,         mode => temporal_merge.mode,         era_name => temporal_merge.era_name,         identity_columns => v_identity_cols_discovered,         row_id_column => temporal_merge.row_id_column,         founding_id_column => temporal_merge.founding_id_column,         delete_mode => temporal_merge.delete_mode,         lookup_keys => v_natural_identity_keys_discovered,         ephemeral_columns => temporal_merge.ephemeral_columns,         p_log_trace => v_log_trace,         p_log_sql => v_log_sql     )"
c18,temporal_merge Parent (With Index),,7401596526555172153,1,266.995208,1000,497,0,0,0,0,141,16395,"CREATE TEMP TABLE resolved_atomic_segments_with_payloads ON COMMIT DROP AS                 SELECT                     with_base_payload.*,                     with_base_payload.stable_pk_payload as propagated_stable_pk_payload                 FROM (                     SELECT                         seg.grouping_key, seg.canonical_nk_json, seg.id, seg.causal_id, seg.is_new_entity, seg.is_identifiable, seg.is_ambiguous, seg.conflicting_ids, seg.stable_identity_columns_are_null, seg.natural_identity_column_values_are_null, seg.valid_from, seg.valid_until,                         target_payloads.t_valid_from, target_payloads.t_valid_until, source_payloads.source_row_id, source_payloads.contributing_row_ids, source_payloads.data_payload as s_data_payload, source_payloads.ephemeral_payload as s_ephemeral_payload,                         target_payloads.data_payload as t_data_payload, target_payloads.ephemeral_payload as t_ephemeral_payload, seg.stable_pk_payload, source_payloads.causal_id as s_causal_id, source_payloads.causal_id as direct_source_causal_id,                         source_payloads.valid_from AS s_valid_from, source_payloads.valid_until AS s_valid_until, NULL::jsonb as trace                     FROM atomic_segments seg                     LEFT JOIN LATERAL (                         SELECT target_row.data_payload, target_row.ephemeral_payload, target_row.valid_from as t_valid_from, target_row.valid_until as t_valid_until, target_row.stable_pk_payload                         FROM target_rows target_row                         WHERE (target_row.id = seg.id OR (target_row.id IS NULL AND seg.id IS NULL)) AND daterange(seg.valid_from, seg.valid_until) <@ daterange(target_row.valid_from, target_row.valid_until)                     ) target_payloads ON true                                              LEFT JOIN LATERAL (                             WITH RECURSIVE ordered_sources AS (                                 SELECT                                     source_row.source_row_id, source_row.data_payload, sou"
ea3,temporal_merge Parent (With Index),,1898143390848601062,1,196.643834,0,198470,3,0,0,0,7970,679167,"CALL sql_saga.temporal_merge_execute(         target_table => temporal_merge.target_table,         source_table => temporal_merge.source_table,         identity_columns => v_identity_cols_discovered,         mode => temporal_merge.mode,         era_name => temporal_merge.era_name,         row_id_column => temporal_merge.row_id_column,         founding_id_column => temporal_merge.founding_id_column,         update_source_with_identity => temporal_merge.update_source_with_identity,         lookup_columns => v_natural_identity_cols_discovered,         delete_mode => temporal_merge.delete_mode,         update_source_with_feedback => temporal_merge.update_source_with_feedback,         feedback_status_column => temporal_merge.feedback_status_column,         feedback_status_key => temporal_merge.feedback_status_key,         feedback_error_column => temporal_merge.feedback_error_column,         feedback_error_key => temporal_merge.feedback_error_key,         ephemeral_columns => temporal_merge.ephemeral_columns,         delay_constraints => temporal_merge.delay_constraints     )"
636,temporal_merge Parent (With Index),,-2128292455520810127,1,187.215249,1000,197103,3,0,0,0,7720,651620,"UPDATE legal_unit t SET valid_from = p.new_valid_from::date, valid_until = p.new_valid_until::date, name = CASE WHEN p.data ? 'name' THEN (p.data->>'name')::character varying ELSE t.name END                         FROM (SELECT * FROM temporal_merge_plan WHERE operation = 'UPDATE' ORDER BY plan_op_seq) p,                              LATERAL jsonb_populate_record(null::legal_unit, p.entity_keys) AS jpr_entity                         WHERE (t.id = jpr_entity.id OR (t.id IS NULL AND jpr_entity.id IS NULL)) AND t.valid_from = p.old_valid_from::date"
cdd,temporal_merge Parent (With Index),,-2991357073806549780,1,35.184333,1000,379,0,0,0,0,114,12795,"CREATE TEMP TABLE source_with_eclipsed_flag ON COMMIT DROP AS                 SELECT                     s1.*,                     eclipse_info.is_eclipsed,                     eclipse_info.eclipsed_by                 FROM source_initial s1                 CROSS JOIN LATERAL (                     SELECT                         COALESCE(sql_saga.covers_without_gaps(daterange(s2.valid_from, s2.valid_until), daterange(s1.valid_from, s1.valid_until) ORDER BY s2.valid_from), false) as is_eclipsed,                         array_agg(s2.source_row_id) as eclipsed_by                     FROM source_initial s2                     WHERE                         (                             (NOT s1.natural_identity_column_values_are_null AND (s1.id IS NOT DISTINCT FROM s2.id))                             OR                             (s1.natural_identity_column_values_are_null AND s1.causal_id = s2.causal_id)                         )                         AND                         -- Only consider newer rows (higher row_id) as potential eclipsers.                         s2.source_row_id > s1.source_row_id                 ) eclipse_info"
25d,temporal_merge Parent (With Index),,3445176724382485277,1,28.2305,1000,367,0,0,0,0,123,14556,"CREATE TEMP TABLE source_rows_with_matches ON COMMIT DROP AS                 SELECT                     source_row.*,                     target_row.stable_pk_payload as discovered_stable_pk_payload,                     target_row.id AS discovered_id_1, target_row.valid_from AS discovered_id_2 /* v_propagated_id_cols_list */                 FROM source_with_eclipsed_flag source_row                 LEFT JOIN target_rows target_row ON (((source_row.id IS NOT DISTINCT FROM target_row.id)) /* v_source_rows_exists_join_expr */)"
