\i sql/include/test_setup.sql
--
-- test_setup.sql
--
-- Common setup for regression tests that need to be self-contained.
-- This script creates the extension, a user role, and grants permissions.
--
SET datestyle = 'ISO, YMD';
CREATE EXTENSION IF NOT EXISTS btree_gist;
CREATE EXTENSION IF NOT EXISTS sql_saga CASCADE;
DO $$
BEGIN
    CREATE ROLE sql_saga_unprivileged_user;
EXCEPTION WHEN duplicate_object THEN
END
$$;
GRANT USAGE ON SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT SELECT ON ALL TABLES IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA sql_saga TO sql_saga_unprivileged_user;
/*
 * Allow the unprivileged user to create tables in the public schema.
 * This is required for tests that create their own tables.
 * PG 15+ restricts this by default.
 */
GRANT CREATE ON SCHEMA public TO PUBLIC;
BEGIN;
-- Use a blank search path, so every table must
-- be prefixed with a schema
SELECT pg_catalog.set_config('search_path', '', false);
 set_config 
------------
 
(1 row)

CREATE SCHEMA exposed;
CREATE SCHEMA hidden;
CREATE TABLE exposed.employees (
  id INTEGER,
  valid_from date,
  valid_to date,
  valid_until date,
  name varchar NOT NULL,
  role varchar NOT NULL
);
CREATE TABLE hidden.staff (
  id INTEGER,
  valid_from date,
  valid_to date,
  valid_until date,
  salary FLOAT,
  employee_id INTEGER
);
-- Before using sql_saga
\d exposed.employees
                    Table "exposed.employees"
   Column    |       Type        | Collation | Nullable | Default 
-------------+-------------------+-----------+----------+---------
 id          | integer           |           |          | 
 valid_from  | date              |           |          | 
 valid_to    | date              |           |          | 
 valid_until | date              |           |          | 
 name        | character varying |           | not null | 
 role        | character varying |           | not null | 

\d hidden.staff
                      Table "hidden.staff"
   Column    |       Type       | Collation | Nullable | Default 
-------------+------------------+-----------+----------+---------
 id          | integer          |           |          | 
 valid_from  | date             |           |          | 
 valid_to    | date             |           |          | 
 valid_until | date             |           |          | 
 salary      | double precision |           |          | 
 employee_id | integer          |           |          | 

-- Verify that enable and disable each work correctly.
SELECT sql_saga.add_era('exposed.employees', 'valid_from', 'valid_until', p_synchronize_valid_to_column := 'valid_to');
NOTICE:  sql_saga: Created trigger "employees_synchronize_temporal_columns_trigger" on table exposed.employees to synchronize columns: valid_to
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_era('hidden.staff', 'valid_from', 'valid_until', p_synchronize_valid_to_column := 'valid_to');
NOTICE:  sql_saga: Created trigger "staff_synchronize_temporal_columns_trigger" on table hidden.staff to synchronize columns: valid_to
 add_era 
---------
 t
(1 row)

TABLE sql_saga.era;
 table_schema | table_name | era_name | valid_from_column_name | valid_until_column_name | range_type | range_subtype | range_subtype_category | bounds_check_constraint | synchronize_valid_to_column | synchronize_range_column | audit_schema_name | audit_table_name 
--------------+------------+----------+------------------------+-------------------------+------------+---------------+------------------------+-------------------------+-----------------------------+--------------------------+-------------------+------------------
 exposed      | employees  | valid    | valid_from             | valid_until             | daterange  | date          | D                      | employees_valid_check   | valid_to                    |                          |                   | 
 hidden       | staff      | valid    | valid_from             | valid_until             | daterange  | date          | D                      | staff_valid_check       | valid_to                    |                          |                   | 
(2 rows)

SELECT sql_saga.add_unique_key('exposed.employees', ARRAY['id'], 'valid');
   add_unique_key   
--------------------
 employees_id_valid
(1 row)

SELECT sql_saga.add_unique_key('hidden.staff', ARRAY['id'], 'valid');
 add_unique_key 
----------------
 staff_id_valid
(1 row)

TABLE sql_saga.unique_keys;
  unique_key_name   | table_schema | table_name | column_names | era_name |            unique_constraint            |   exclude_constraint    | predicate 
--------------------+--------------+------------+--------------+----------+-----------------------------------------+-------------------------+-----------
 employees_id_valid | exposed      | employees  | {id}         | valid    | employees_id_valid_from_valid_until_key | employees_id_valid_excl | 
 staff_id_valid     | hidden       | staff      | {id}         | valid    | staff_id_valid_from_valid_until_key     | staff_id_valid_excl     | 
(2 rows)

SELECT sql_saga.add_foreign_key('hidden.staff', ARRAY['employee_id'], 'valid', 'employees_id_valid');
     add_foreign_key     
-------------------------
 staff_employee_id_valid
(1 row)

TABLE sql_saga.foreign_keys;
    foreign_key_name     |         type         | table_schema | table_name | column_names  | fk_era_name |                fk_table_columns_snapshot                |  unique_key_name   | match_type | update_action | delete_action |         fk_insert_trigger         |         fk_update_trigger         | fk_check_constraint | fk_helper_function |         uk_update_trigger         |         uk_delete_trigger         
-------------------------+----------------------+--------------+------------+---------------+-------------+---------------------------------------------------------+--------------------+------------+---------------+---------------+-----------------------------------+-----------------------------------+---------------------+--------------------+-----------------------------------+-----------------------------------
 staff_employee_id_valid | temporal_to_temporal | hidden       | staff      | {employee_id} | valid       | {id,valid_from,valid_to,valid_until,salary,employee_id} | employees_id_valid | SIMPLE     | NO ACTION     | NO ACTION     | staff_employee_id_valid_fk_insert | staff_employee_id_valid_fk_update |                     |                    | staff_employee_id_valid_uk_update | staff_employee_id_valid_uk_delete
(1 row)

-- While sql_saga is active
\d exposed.employees
                    Table "exposed.employees"
   Column    |       Type        | Collation | Nullable | Default 
-------------+-------------------+-----------+----------+---------
 id          | integer           |           |          | 
 valid_from  | date              |           | not null | 
 valid_to    | date              |           |          | 
 valid_until | date              |           | not null | 
 name        | character varying |           | not null | 
 role        | character varying |           | not null | 
Indexes:
    "employees_id_idx" btree (id)
    "employees_id_valid_excl" EXCLUDE USING gist (id WITH =, daterange(valid_from, valid_until) WITH &&) DEFERRABLE
    "employees_id_valid_from_valid_until_key" UNIQUE CONSTRAINT, btree (id, valid_from, valid_until) DEFERRABLE
Check constraints:
    "employees_valid_check" CHECK (valid_from < valid_until)
Triggers:
    employees_synchronize_temporal_columns_trigger BEFORE INSERT OR UPDATE OF valid_from, valid_until, valid_to ON exposed.employees FOR EACH ROW EXECUTE FUNCTION sql_saga.synchronize_temporal_columns('valid_from', 'valid_until', 'valid_to', 'null', 'date')
    staff_employee_id_valid_uk_delete AFTER DELETE ON exposed.employees FROM hidden.staff DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION sql_saga.uk_delete_check_c('staff_employee_id_valid', 'hidden', 'staff', '{employee_id}', 'valid', 'valid_from', 'valid_until', 'exposed', 'employees', '{id}', 'valid', 'valid_from', 'valid_until', 'SIMPLE', 'NO ACTION', 'NO ACTION', 'temporal_to_temporal')
    staff_employee_id_valid_uk_update AFTER UPDATE OF id, valid_from, valid_until ON exposed.employees FROM hidden.staff DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION sql_saga.uk_update_check_c('staff_employee_id_valid', 'hidden', 'staff', '{employee_id}', 'valid', 'valid_from', 'valid_until', 'exposed', 'employees', '{id}', 'valid', 'valid_from', 'valid_until', 'SIMPLE', 'NO ACTION', 'NO ACTION', 'temporal_to_temporal')

\d hidden.staff
                      Table "hidden.staff"
   Column    |       Type       | Collation | Nullable | Default 
-------------+------------------+-----------+----------+---------
 id          | integer          |           |          | 
 valid_from  | date             |           | not null | 
 valid_to    | date             |           |          | 
 valid_until | date             |           | not null | 
 salary      | double precision |           |          | 
 employee_id | integer          |           |          | 
Indexes:
    "staff_id_idx" btree (id)
    "staff_id_valid_excl" EXCLUDE USING gist (id WITH =, daterange(valid_from, valid_until) WITH &&) DEFERRABLE
    "staff_id_valid_from_valid_until_key" UNIQUE CONSTRAINT, btree (id, valid_from, valid_until) DEFERRABLE
Check constraints:
    "staff_valid_check" CHECK (valid_from < valid_until)
Triggers:
    staff_employee_id_valid_fk_insert AFTER INSERT ON hidden.staff FROM exposed.employees DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION sql_saga.fk_insert_check_c('staff_employee_id_valid', 'hidden', 'staff', '{employee_id}', 'valid', 'valid_from', 'valid_until', 'exposed', 'employees', '{id}', 'valid', 'valid_from', 'valid_until', 'SIMPLE', 'NO ACTION', 'NO ACTION')
    staff_employee_id_valid_fk_update AFTER UPDATE OF employee_id, valid_from, valid_until, valid_to ON hidden.staff FROM exposed.employees DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION sql_saga.fk_update_check_c('staff_employee_id_valid', 'hidden', 'staff', '{employee_id}', 'valid', 'valid_from', 'valid_until', 'exposed', 'employees', '{id}', 'valid', 'valid_from', 'valid_until', 'SIMPLE', 'NO ACTION', 'NO ACTION')
    staff_synchronize_temporal_columns_trigger BEFORE INSERT OR UPDATE OF valid_from, valid_until, valid_to ON hidden.staff FOR EACH ROW EXECUTE FUNCTION sql_saga.synchronize_temporal_columns('valid_from', 'valid_until', 'valid_to', 'null', 'date')

-- Test data.
-- We only insert valid_from and valid_to, the trigger will set valid_after.
INSERT INTO exposed.employees (id, valid_from, valid_to, name, role) VALUES
(101, '2022-01-01', '2022-06-30', 'Alice Johnson', 'Junior Manager'),
(101, '2022-07-01', '2023-12-31', 'Alice Johnson', 'Senior Manager'),
(102, '2022-01-01', '2022-08-31', 'Bob Smith', 'Junior Engineer'),
(102, '2022-09-01', '2023-12-31', 'Bob Smith', 'Senior Engineer'),
(103, '2022-01-01', '2022-12-31', 'Charlie Brown', 'Designer'),
(104, '2022-01-01', '2022-05-31', 'Diana Prince', 'Junior Analyst'),
(104, '2022-06-01', '2023-12-31', 'Diana Prince', 'Senior Analyst');
INSERT INTO hidden.staff (id, valid_from, valid_to, employee_id, salary) VALUES
(201, '2022-01-01', '2022-07-31',101 , 50000.00),
(201, '2022-08-01', '2023-12-31',101 , 60000.00), -- Salary increase in August, a month after role change in July
(202, '2022-01-01', '2022-09-30',102 , 55000.00),
(202, '2022-10-01', '2023-12-31',102 , 70000.00), -- Salary increase in October, a month after role change in September
(203, '2022-01-01', '2022-12-31',103 , 48000.00),
(204, '2022-01-01', '2022-06-30',104 , 45000.00),
(204, '2022-07-01', '2023-12-31',104 , 55000.00); -- Salary increase in July, a month after role change in June
-- Fail
SAVEPOINT expect_delete_fail;
DELETE FROM exposed.employees WHERE id = 101;
ERROR:  update or delete on table "exposed.employees" violates foreign key constraint "staff_employee_id_valid" on table "hidden.staff"
ROLLBACK TO SAVEPOINT expect_delete_fail;
-- Success
DELETE FROM hidden.staff WHERE employee_id = 101;
DELETE FROM exposed.employees WHERE id = 101;
-- Fail
SAVEPOINT expect_update_fail;
UPDATE hidden.staff SET valid_until = 'infinity' WHERE employee_id = 103;
ERROR:  insert or update on table "hidden.staff" violates foreign key constraint "staff_employee_id_valid"
ROLLBACK TO SAVEPOINT expect_update_fail;
-- Regression test: This should fail, same as the test above it.
SAVEPOINT regression;
UPDATE hidden.staff SET valid_to = 'infinity' WHERE employee_id = 103;
ERROR:  insert or update on table "hidden.staff" violates foreign key constraint "staff_employee_id_valid"
ROLLBACK TO SAVEPOINT regression;
-- Success
UPDATE exposed.employees SET valid_to = 'infinity' WHERE id = 103;
UPDATE hidden.staff SET valid_to = 'infinity' WHERE employee_id = 103;
-- Teardown
SELECT sql_saga.drop_foreign_key('hidden.staff', ARRAY['employee_id'], 'valid');
 drop_foreign_key 
------------------
 
(1 row)

TABLE sql_saga.foreign_keys;
 foreign_key_name | type | table_schema | table_name | column_names | fk_era_name | fk_table_columns_snapshot | unique_key_name | match_type | update_action | delete_action | fk_insert_trigger | fk_update_trigger | fk_check_constraint | fk_helper_function | uk_update_trigger | uk_delete_trigger 
------------------+------+--------------+------------+--------------+-------------+---------------------------+-----------------+------------+---------------+---------------+-------------------+-------------------+---------------------+--------------------+-------------------+-------------------
(0 rows)

SELECT sql_saga.drop_unique_key('exposed.employees', ARRAY['id'], 'valid');
 drop_unique_key 
-----------------
 
(1 row)

SELECT sql_saga.drop_unique_key('hidden.staff',ARRAY['id'], 'valid');
 drop_unique_key 
-----------------
 
(1 row)

TABLE sql_saga.unique_keys;
 unique_key_name | table_schema | table_name | column_names | era_name | unique_constraint | exclude_constraint | predicate 
-----------------+--------------+------------+--------------+----------+-------------------+--------------------+-----------
(0 rows)

SELECT sql_saga.drop_era('exposed.employees');
 drop_era 
----------
 t
(1 row)

SELECT sql_saga.drop_era('hidden.staff');
 drop_era 
----------
 t
(1 row)

TABLE sql_saga.era;
 table_schema | table_name | era_name | valid_from_column_name | valid_until_column_name | range_type | range_subtype | range_subtype_category | bounds_check_constraint | synchronize_valid_to_column | synchronize_range_column | audit_schema_name | audit_table_name 
--------------+------------+----------+------------------------+-------------------------+------------+---------------+------------------------+-------------------------+-----------------------------+--------------------------+-------------------+------------------
(0 rows)

-- After removing sql_saga, it should be as before.
\d exposed.employees
                    Table "exposed.employees"
   Column    |       Type        | Collation | Nullable | Default 
-------------+-------------------+-----------+----------+---------
 id          | integer           |           |          | 
 valid_from  | date              |           | not null | 
 valid_to    | date              |           |          | 
 valid_until | date              |           | not null | 
 name        | character varying |           | not null | 
 role        | character varying |           | not null | 
Indexes:
    "employees_id_idx" btree (id)
Check constraints:
    "employees_valid_check" CHECK (valid_from < valid_until)
Triggers:
    employees_synchronize_temporal_columns_trigger BEFORE INSERT OR UPDATE OF valid_from, valid_until, valid_to ON exposed.employees FOR EACH ROW EXECUTE FUNCTION sql_saga.synchronize_temporal_columns('valid_from', 'valid_until', 'valid_to', 'null', 'date')

\d hidden.staff
                      Table "hidden.staff"
   Column    |       Type       | Collation | Nullable | Default 
-------------+------------------+-----------+----------+---------
 id          | integer          |           |          | 
 valid_from  | date             |           | not null | 
 valid_to    | date             |           |          | 
 valid_until | date             |           | not null | 
 salary      | double precision |           |          | 
 employee_id | integer          |           |          | 
Indexes:
    "staff_id_idx" btree (id)
Check constraints:
    "staff_valid_check" CHECK (valid_from < valid_until)
Triggers:
    staff_synchronize_temporal_columns_trigger BEFORE INSERT OR UPDATE OF valid_from, valid_until, valid_to ON hidden.staff FOR EACH ROW EXECUTE FUNCTION sql_saga.synchronize_temporal_columns('valid_from', 'valid_until', 'valid_to', 'null', 'date')

ROLLBACK;
\i sql/include/test_teardown.sql
--
-- test_teardown.sql
--
-- Common teardown for regression tests. This script drops the unprivileged
-- user role created by test_setup.sql.
--
-- It is important to reset the role first, in case a test fails and
-- leaves the session role set to the user that is about to be dropped.
RESET ROLE;
-- Drop the extensions to ensure a clean state for the next test.
-- Use CASCADE to remove any dependent objects created by sql_saga.
DROP EXTENSION IF EXISTS sql_saga CASCADE;
DROP EXTENSION IF EXISTS btree_gist CASCADE;
-- Revoke any privileges held by the test user and drop any objects they own.
-- This is necessary before the role can be dropped.
DROP OWNED BY sql_saga_unprivileged_user;
DROP ROLE IF EXISTS sql_saga_unprivileged_user;
