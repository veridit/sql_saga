-- Use a blank search path, so every table must
-- be prefixed with a schema
SELECT pg_catalog.set_config('search_path', '', false);
 set_config 
------------
 
(1 row)

CREATE EXTENSION sql_saga CASCADE;
ERROR:  extension "sql_saga" already exists
CREATE SCHEMA exposed;
CREATE SCHEMA hidden;
CREATE TABLE exposed.employees (
  id INTEGER,
  valid_after date,
  valid_from date,
  valid_to date,
  name varchar NOT NULL,
  role varchar NOT NULL
);
CREATE TABLE hidden.staff (
  id INTEGER,
  valid_after date,
  valid_from date,
  valid_to date,
  salary FLOAT,
  employee_id INTEGER
);
-- Before using sql_saga
\d exposed.employees
                    Table "exposed.employees"
   Column    |       Type        | Collation | Nullable | Default 
-------------+-------------------+-----------+----------+---------
 id          | integer           |           |          | 
 valid_after | date              |           |          | 
 valid_from  | date              |           |          | 
 valid_to    | date              |           |          | 
 name        | character varying |           | not null | 
 role        | character varying |           | not null | 

\d hidden.staff
                      Table "hidden.staff"
   Column    |       Type       | Collation | Nullable | Default 
-------------+------------------+-----------+----------+---------
 id          | integer          |           |          | 
 valid_after | date             |           |          | 
 valid_from  | date             |           |          | 
 valid_to    | date             |           |          | 
 salary      | double precision |           |          | 
 employee_id | integer          |           |          | 

CREATE TRIGGER synchronize_employees_validity BEFORE INSERT OR UPDATE ON exposed.employees
    FOR EACH ROW EXECUTE FUNCTION sql_saga.synchronize_valid_from_after();
CREATE TRIGGER synchronize_staff_validity BEFORE INSERT OR UPDATE ON hidden.staff
    FOR EACH ROW EXECUTE FUNCTION sql_saga.synchronize_valid_from_after();
-- Verify that enable and disable each work correctly.
SELECT sql_saga.add_era('exposed.employees', 'valid_after', 'valid_to');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_era('hidden.staff', 'valid_after', 'valid_to');
 add_era 
---------
 t
(1 row)

TABLE sql_saga.era;
     table_oid     | era_name | start_after_column_name | stop_on_column_name | range_type | bounds_check_constraint | audit_table_oid 
-------------------+----------+-------------------------+---------------------+------------+-------------------------+-----------------
 exposed.employees | valid    | valid_after             | valid_to            | daterange  | employees_valid_check   | 
 hidden.staff      | valid    | valid_after             | valid_to            | daterange  | staff_valid_check       | 
(2 rows)

SELECT sql_saga.add_unique_key('exposed.employees', ARRAY['id'], 'valid');
   add_unique_key   
--------------------
 employees_id_valid
(1 row)

SELECT sql_saga.add_unique_key('hidden.staff', ARRAY['id'], 'valid');
 add_unique_key 
----------------
 staff_id_valid
(1 row)

TABLE sql_saga.unique_keys;
  unique_key_name   |     table_oid     | column_names | era_name |           unique_constraint           |     exclude_constraint      
--------------------+-------------------+--------------+----------+---------------------------------------+-----------------------------
 employees_id_valid | exposed.employees | {id}         | valid    | employees_id_valid_after_valid_to_key | employees_id_daterange_excl
 staff_id_valid     | hidden.staff      | {id}         | valid    | staff_id_valid_after_valid_to_key     | staff_id_daterange_excl
(2 rows)

SELECT sql_saga.add_foreign_key('hidden.staff', ARRAY['employee_id'], 'valid', 'employees_id_valid');
     add_foreign_key     
-------------------------
 staff_employee_id_valid
(1 row)

TABLE sql_saga.foreign_keys;
    foreign_key_name     |  table_oid   | column_names  | era_name |  unique_key_name   | match_type | update_action | delete_action |         fk_insert_trigger         |         fk_update_trigger         |         uk_update_trigger         |         uk_delete_trigger         
-------------------------+--------------+---------------+----------+--------------------+------------+---------------+---------------+-----------------------------------+-----------------------------------+-----------------------------------+-----------------------------------
 staff_employee_id_valid | hidden.staff | {employee_id} | valid    | employees_id_valid | SIMPLE     | NO ACTION     | NO ACTION     | staff_employee_id_valid_fk_insert | staff_employee_id_valid_fk_update | staff_employee_id_valid_uk_update | staff_employee_id_valid_uk_delete
(1 row)

-- While sql_saga is active
\d exposed.employees
                    Table "exposed.employees"
   Column    |       Type        | Collation | Nullable | Default 
-------------+-------------------+-----------+----------+---------
 id          | integer           |           |          | 
 valid_after | date              |           | not null | 
 valid_from  | date              |           |          | 
 valid_to    | date              |           | not null | 
 name        | character varying |           | not null | 
 role        | character varying |           | not null | 
Indexes:
    "employees_id_daterange_excl" EXCLUDE USING gist (id WITH =, daterange(valid_after, valid_to, '(]'::text) WITH &&) DEFERRABLE
    "employees_id_valid_after_valid_to_key" UNIQUE CONSTRAINT, btree (id, valid_after, valid_to) DEFERRABLE
Check constraints:
    "employees_valid_check" CHECK (valid_after < valid_to)
Triggers:
    staff_employee_id_valid_uk_delete AFTER DELETE ON exposed.employees FROM hidden.staff DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION sql_saga.uk_delete_check_c('staff_employee_id_valid', 'hidden.staff', 'hidden', 'staff', '{{employee_id}}', 'valid', 'valid_after', 'valid_to', 'exposed', 'employees', '{{id}}', 'valid', 'valid_after', 'valid_to', 'SIMPLE', 'NO ACTION', 'NO ACTION')
    staff_employee_id_valid_uk_update AFTER UPDATE OF id, valid_after, valid_to ON exposed.employees FROM hidden.staff DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION sql_saga.uk_update_check_c('staff_employee_id_valid', 'hidden.staff', 'hidden', 'staff', '{{employee_id}}', 'valid', 'valid_after', 'valid_to', 'exposed', 'employees', '{{id}}', 'valid', 'valid_after', 'valid_to', 'SIMPLE', 'NO ACTION', 'NO ACTION')
    synchronize_employees_validity BEFORE INSERT OR UPDATE ON exposed.employees FOR EACH ROW EXECUTE FUNCTION sql_saga.synchronize_valid_from_after()

\d hidden.staff
                      Table "hidden.staff"
   Column    |       Type       | Collation | Nullable | Default 
-------------+------------------+-----------+----------+---------
 id          | integer          |           |          | 
 valid_after | date             |           | not null | 
 valid_from  | date             |           |          | 
 valid_to    | date             |           | not null | 
 salary      | double precision |           |          | 
 employee_id | integer          |           |          | 
Indexes:
    "staff_id_daterange_excl" EXCLUDE USING gist (id WITH =, daterange(valid_after, valid_to, '(]'::text) WITH &&) DEFERRABLE
    "staff_id_valid_after_valid_to_key" UNIQUE CONSTRAINT, btree (id, valid_after, valid_to) DEFERRABLE
Check constraints:
    "staff_valid_check" CHECK (valid_after < valid_to)
Triggers:
    staff_employee_id_valid_fk_insert AFTER INSERT ON hidden.staff FROM exposed.employees DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION sql_saga.fk_insert_check_c('staff_employee_id_valid', 'hidden.staff', 'hidden', 'staff', '{{employee_id}}', 'valid', 'valid_after', 'valid_to', 'exposed', 'employees', '{{id}}', 'valid', 'valid_after', 'valid_to', 'SIMPLE', 'NO ACTION', 'NO ACTION')
    staff_employee_id_valid_fk_update AFTER UPDATE OF employee_id, valid_after, valid_to ON hidden.staff FROM exposed.employees DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE FUNCTION sql_saga.fk_update_check_c('staff_employee_id_valid', 'hidden.staff', 'hidden', 'staff', '{{employee_id}}', 'valid', 'valid_after', 'valid_to', 'exposed', 'employees', '{{id}}', 'valid', 'valid_after', 'valid_to', 'SIMPLE', 'NO ACTION', 'NO ACTION')
    synchronize_staff_validity BEFORE INSERT OR UPDATE ON hidden.staff FOR EACH ROW EXECUTE FUNCTION sql_saga.synchronize_valid_from_after()

-- Test data.
-- We only insert valid_from and valid_to, the trigger will set valid_after.
INSERT INTO exposed.employees (id, valid_from, valid_to, name, role) VALUES
(101, '2022-01-01', '2022-06-30', 'Alice Johnson', 'Junior Manager'),
(101, '2022-07-01', '2023-12-31', 'Alice Johnson', 'Senior Manager'),
(102, '2022-01-01', '2022-08-31', 'Bob Smith', 'Junior Engineer'),
(102, '2022-09-01', '2023-12-31', 'Bob Smith', 'Senior Engineer'),
(103, '2022-01-01', '2022-12-31', 'Charlie Brown', 'Designer'),
(104, '2022-01-01', '2022-05-31', 'Diana Prince', 'Junior Analyst'),
(104, '2022-06-01', '2023-12-31', 'Diana Prince', 'Senior Analyst');
INSERT INTO hidden.staff (id, valid_from, valid_to, employee_id, salary) VALUES
(201, '2022-01-01', '2022-07-31',101 , 50000.00),
(201, '2022-08-01', '2023-12-31',101 , 60000.00), -- Salary increase in August, a month after role change in July
(202, '2022-01-01', '2022-09-30',102 , 55000.00),
(202, '2022-10-01', '2023-12-31',102 , 70000.00), -- Salary increase in October, a month after role change in September
(203, '2022-01-01', '2022-12-31',103 , 48000.00),
(204, '2022-01-01', '2022-06-30',104 , 45000.00),
(204, '2022-07-01', '2023-12-31',104 , 55000.00); -- Salary increase in July, a month after role change in June
-- Fail
DELETE FROM exposed.employees WHERE id = 101;
ERROR:  update or delete on table "exposed.employees" violates foreign key constraint "staff_employee_id_valid" on table "hidden.staff"
-- Success
DELETE FROM hidden.staff WHERE employee_id = 101;
DELETE FROM exposed.employees WHERE id = 101;
-- Fail
UPDATE hidden.staff SET valid_to = 'infinity' WHERE employee_id = 103;
ERROR:  insert or update on table "hidden.staff" violates foreign key constraint "staff_employee_id_valid"
-- Success
UPDATE exposed.employees SET valid_to = 'infinity' WHERE id = 103;
UPDATE hidden.staff SET valid_to = 'infinity' WHERE employee_id = 103;
-- Teardown
SELECT sql_saga.drop_foreign_key('hidden.staff', 'staff_employee_id_valid');
 drop_foreign_key 
------------------
 t
(1 row)

TABLE sql_saga.foreign_keys;
 foreign_key_name | table_oid | column_names | era_name | unique_key_name | match_type | update_action | delete_action | fk_insert_trigger | fk_update_trigger | uk_update_trigger | uk_delete_trigger 
------------------+-----------+--------------+----------+-----------------+------------+---------------+---------------+-------------------+-------------------+-------------------+-------------------
(0 rows)

SELECT sql_saga.drop_unique_key('exposed.employees', 'employees_id_valid');
 drop_unique_key 
-----------------
 
(1 row)

SELECT sql_saga.drop_unique_key('hidden.staff','staff_id_valid');
 drop_unique_key 
-----------------
 
(1 row)

TABLE sql_saga.unique_keys;
 unique_key_name | table_oid | column_names | era_name | unique_constraint | exclude_constraint 
-----------------+-----------+--------------+----------+-------------------+--------------------
(0 rows)

SELECT sql_saga.drop_era('exposed.employees');
 drop_era 
----------
 t
(1 row)

SELECT sql_saga.drop_era('hidden.staff');
 drop_era 
----------
 t
(1 row)

TABLE sql_saga.era;
 table_oid | era_name | start_after_column_name | stop_on_column_name | range_type | bounds_check_constraint | audit_table_oid 
-----------+----------+-------------------------+---------------------+------------+-------------------------+-----------------
(0 rows)

-- After removing sql_saga, it should be as before.
\d exposed.employees
                    Table "exposed.employees"
   Column    |       Type        | Collation | Nullable | Default 
-------------+-------------------+-----------+----------+---------
 id          | integer           |           |          | 
 valid_after | date              |           | not null | 
 valid_from  | date              |           |          | 
 valid_to    | date              |           | not null | 
 name        | character varying |           | not null | 
 role        | character varying |           | not null | 
Triggers:
    synchronize_employees_validity BEFORE INSERT OR UPDATE ON exposed.employees FOR EACH ROW EXECUTE FUNCTION sql_saga.synchronize_valid_from_after()

\d hidden.staff
                      Table "hidden.staff"
   Column    |       Type       | Collation | Nullable | Default 
-------------+------------------+-----------+----------+---------
 id          | integer          |           |          | 
 valid_after | date             |           | not null | 
 valid_from  | date             |           |          | 
 valid_to    | date             |           | not null | 
 salary      | double precision |           |          | 
 employee_id | integer          |           |          | 
Triggers:
    synchronize_staff_validity BEFORE INSERT OR UPDATE ON hidden.staff FOR EACH ROW EXECUTE FUNCTION sql_saga.synchronize_valid_from_after()

DROP TABLE exposed.employees;
DROP TABLE hidden.staff;
DROP EXTENSION sql_saga;
DROP EXTENSION btree_gist;
