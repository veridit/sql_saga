-- First, create the integer shifts table
CREATE TABLE bigint_shifts (
  job_id INTEGER,
  worker_id INTEGER,
  valid_from BIGINT,
  valid_to BIGINT
);
-- Add era and unique key via sql_saga
SELECT sql_saga.add_era('bigint_shifts', 'valid_from', 'valid_to');
 add_era 
---------
 t
(1 row)

SELECT sql_saga.add_unique_key('bigint_shifts', ARRAY['job_id', 'worker_id']);
            add_unique_key            
--------------------------------------
 bigint_shifts_job_id_worker_id_valid
(1 row)

TABLE sql_saga.era;
  table_name   | era_name | start_after_column_name | stop_on_column_name | range_type |  bounds_check_constraint  | audit_table_name 
---------------+----------+-------------------------+---------------------+------------+---------------------------+------------------
 bigint_shifts | valid    | valid_from              | valid_to            | int8range  | bigint_shifts_valid_check | 
(1 row)

TABLE sql_saga.unique_keys;
               key_name               |  table_name   |    column_names    | era_name |                   unique_constraint                    |              exclude_constraint               
--------------------------------------+---------------+--------------------+----------+--------------------------------------------------------+-----------------------------------------------
 bigint_shifts_job_id_worker_id_valid | bigint_shifts | {job_id,worker_id} | valid    | bigint_shifts_job_id_worker_id_valid_from_valid_to_key | bigint_shifts_job_id_worker_id_int8range_excl
(1 row)

-- Insert test data into the integer shifts table
INSERT INTO bigint_shifts(job_id, worker_id, valid_from, valid_to) VALUES
  (1, 1, 1000000000, 6000000000),
  (1, 2, 6000000000, 12000000000); 
-- This test checks for an exact match with one range
-- Expected: TRUE
SELECT sql_saga.no_gaps(int8range(valid_from, valid_to), int8range(1000000000, 6000000000))
FROM bigint_shifts
WHERE job_id = 1;
 no_gaps 
---------
 t
(1 row)

-- This test checks for an exact match with two consecutive ranges
-- Expected: TRUE
SELECT sql_saga.no_gaps(int8range(valid_from, valid_to), int8range(1000000000, 12000000000))
FROM bigint_shifts
WHERE job_id = 1;
 no_gaps 
---------
 t
(1 row)

-- Test 3: Range with Extra at the Beginning
-- Expected: TRUE
SELECT sql_saga.no_gaps(int8range(valid_from, valid_to), int8range(2000000000, 6000000000))
FROM bigint_shifts
WHERE job_id = 1;
 no_gaps 
---------
 t
(1 row)

-- Test 4: Range with Extra at the End
-- Expected: TRUE
SELECT sql_saga.no_gaps(int8range(valid_from, valid_to), int8range(1000000000, 11000000000))
FROM bigint_shifts
WHERE job_id = 1;
 no_gaps 
---------
 t
(1 row)

-- Test 5: Range with Extra on Both Sides
-- Expected: TRUE
SELECT sql_saga.no_gaps(int8range(valid_from, valid_to), int8range(2000000000, 11000000000))
FROM bigint_shifts
WHERE job_id = 1;
 no_gaps 
---------
 t
(1 row)

-- Test 6: Range that Misses Completely
-- Expected: FALSE
SELECT sql_saga.no_gaps(int8range(valid_from, valid_to), int8range(20000000000, 25000000000))
FROM bigint_shifts
WHERE job_id = 1;
 no_gaps 
---------
 f
(1 row)

-- Test 7: Range with Uncovered Time at the Beginning
-- Expected: FALSE
SELECT sql_saga.no_gaps(int8range(valid_from, valid_to), int8range(0, 12000000000))
FROM bigint_shifts
WHERE job_id = 1;
 no_gaps 
---------
 f
(1 row)

-- Test 8: Range with Uncovered Time at the End
-- Expected: FALSE
SELECT sql_saga.no_gaps(int8range(valid_from, valid_to), int8range(1000000000, 15000000000))
FROM bigint_shifts
WHERE job_id = 1;
 no_gaps 
---------
 f
(1 row)

SELECT sql_saga.drop_unique_key('bigint_shifts', 'bigint_shifts_job_id_worker_id_valid');
 drop_unique_key 
-----------------
 
(1 row)

SELECT sql_saga.drop_era('bigint_shifts');
 drop_era 
----------
 t
(1 row)

DROP TABLE bigint_shifts;
