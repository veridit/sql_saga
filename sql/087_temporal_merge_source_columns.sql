\i sql/include/test_setup.sql

BEGIN;

CREATE SCHEMA repro;

-- Target table
CREATE TABLE repro.units (
    id int GENERATED BY DEFAULT AS IDENTITY,
    org_nr text NOT NULL,
    name text,
    valid_from date NOT NULL,
    valid_until date
);
SELECT sql_saga.add_era('repro.units');
SELECT sql_saga.add_unique_key('repro.units', ARRAY['id'], key_type => 'primary');
SELECT sql_saga.add_unique_key('repro.units', ARRAY['org_nr'], key_type => 'natural');

-- Source table
CREATE TEMP TABLE source_units (
    row_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    org_nr text,
    name text,
    valid_from date,
    valid_until date
) ON COMMIT DROP;
INSERT INTO source_units (org_nr, name, valid_from, valid_until) VALUES
    ('111', 'Unit A', '2023-01-01', '2024-01-01');


\echo '--- Scenario 1: identity_column missing from source ---'
SAVEPOINT expect_error;
-- This call is expected to fail because 'id' is not in 'source_units'
CALL sql_saga.temporal_merge(
    target_table => 'repro.units',
    source_table => 'source_units',
    identity_columns => ARRAY['id'],
    natural_identity_columns => ARRAY['org_nr']
);
ROLLBACK TO SAVEPOINT expect_error;

\echo '--- Scenario 2: natural_identity_column missing from source ---'
SAVEPOINT expect_error;
-- This call is expected to fail because 'org_nr_typo' is not in 'source_units'
CALL sql_saga.temporal_merge(
    target_table => 'repro.units',
    source_table => 'source_units',
    identity_columns => ARRAY[]::text[],
    natural_identity_columns => ARRAY['org_nr_typo']
);
ROLLBACK TO SAVEPOINT expect_error;

\echo '--- Scenario 3: identity_column missing from target ---'
SAVEPOINT expect_error;
-- This call is expected to fail because 'id_typo' is not in 'repro.units'
-- We need a source table with the column for this test.
CREATE TEMP TABLE source_with_id (row_id int, org_nr text, name text, valid_from date, valid_until date, id_typo int) ON COMMIT DROP;
CALL sql_saga.temporal_merge(
    target_table => 'repro.units',
    source_table => 'source_with_id',
    identity_columns => ARRAY['id_typo'],
    natural_identity_columns => ARRAY['org_nr']
);
ROLLBACK TO SAVEPOINT expect_error;

\echo '--- Scenario 4: Happy path (identity_columns not specified, so not validated) ---'
-- This should succeed. The previous test run showed it does when identity_columns is empty.
CALL sql_saga.temporal_merge(
    target_table => 'repro.units',
    source_table => 'source_units',
    identity_columns => ARRAY[]::text[],
    natural_identity_columns => ARRAY['org_nr'],
    mode => 'MERGE_ENTITY_UPSERT'
);
\echo '--- State after merge ---'
SELECT id, org_nr, name, valid_from, valid_until FROM repro.units ORDER BY id, valid_from;


ROLLBACK;

\i sql/include/test_teardown.sql
