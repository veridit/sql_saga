--
-- Test for handling of various generated/identity columns
-- in the FOR PORTION OF update trigger.
--
-- The update_portion_of() trigger function must correctly identify and
-- exclude all varieties of generated columns (SERIAL, IDENTITY, STORED)
-- from the INSERT statements it dynamically generates when splitting a row.
--
SET ROLE TO sql_saga_unprivileged_user;

CREATE TABLE gen_cols_test (
    id_serial BIGSERIAL,
    id_gen_default BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_gen_always BIGINT GENERATED ALWAYS AS IDENTITY,
    id_stored BIGINT GENERATED ALWAYS AS (id_serial * 2) STORED,
    product TEXT,
    """from""" INTEGER,
    """until""" INTEGER,
    price NUMERIC
);

-- Add sql_saga features with non-standard, quoted column names
SELECT sql_saga.add_era('gen_cols_test', '"from"', '"until"', 'p');
SELECT sql_saga.add_api('gen_cols_test', 'p');

-- Insert initial data
INSERT INTO gen_cols_test (product, """from""", """until""", price) VALUES ('Widget', 10, 20, 100);

TABLE gen_cols_test;

-- Perform an update that splits the existing row.
-- This will trigger an INSERT within the update_portion_of function.
-- If the generated columns are not correctly excluded from the INSERT,
-- this statement will fail, especially for the GENERATED ALWAYS columns.
UPDATE gen_cols_test__for_portion_of_p SET """from""" = 15, """until""" = 20, price = 80;

-- Verify the result. We expect two rows now.
TABLE gen_cols_test ORDER BY """from""";

-- Clean up
SELECT sql_saga.drop_api('gen_cols_test', 'p');
SELECT sql_saga.drop_era('gen_cols_test', 'p');
DROP TABLE gen_cols_test;
